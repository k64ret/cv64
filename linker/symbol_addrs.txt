// src/gamestate.c =============================================================

gamestate_create = 0x80000460; // type:func
gamestate_change = 0x80000510; // type:func

// End of src/gamestate.c ======================================================


// src/memory.c ================================================================

// .text
memory_clear                              = 0x80000770; // type:func
memory_copy                               = 0x800008D0; // type:func
heap_init                                 = 0x80000C28; // type:func
heap_free                                 = 0x80000C78; // type:func
heap_writebackDCache                      = 0x80000C94; // type:func
initHeaps                                 = 0x80000CF4; // type:func
heap_alloc                                = 0x80000D80; // type:func
heap_allocWithAlignment                   = 0x80000E58; // type:func
heapBlock_updateBlockMaxSize              = 0x80000FB4; // type:func
GraphicContainer_Alloc                    = 0x80001008; // type:func
heapBlock_free                            = 0x80001078; // type:func
GraphicContainer_Free                     = 0x80001080; // type:func
object_curLevel_goToNextFunc              = 0x80001380; // type:func
object_prevLevel_goToNextFunc             = 0x800013BC; // type:func
object_nextLevel_goToNextFunc             = 0x800013FC; // type:func
object_curLevel_goToNextFuncAndClearTimer = 0x80001448; // type:func
object_curLevel_goToPrevFunc              = 0x80001488; // type:func
object_prevLevel_goToPrevFunc             = 0x800014C4; // type:func
object_nextLevel_goToPrevFunc             = 0x80001504; // type:func
object_curLevel_goToPrevFuncAndClearTimer = 0x80001550; // type:func
object_curLevel_goToFunc                  = 0x80001590; // type:func
object_curLevel_goToFuncInLevel           = 0x800015C4; // type:func
object_prevLevel_goToFunc                 = 0x80001600; // type:func
object_nextLevel_goToFunc                 = 0x80001638; // type:func

// End of src/memory.c =========================================================


// src/object.c ================================================================

// .text
object_isValid                         = 0x80001680; // type:func
object_free                            = 0x800016A8; // type:func
clearAllObjects                        = 0x8000177C; // type:func
object_allocate                        = 0x800017DC; // type:func
updateObjectListFreeSlot               = 0x80001868; // type:func
object_create                          = 0x800018AC; // type:func
object_createAndSetChild               = 0x80001980; // type:func
object_findFirstObjectByID             = 0x80001A80; // type:func
objectList_findFirstObjectByID         = 0x80001AD0; // type:func
object_findObjectBetweenIDRange        = 0x80001AF4; // type:func
objectList_findObjectBetweenRange      = 0x80001B50; // type:func
object_findObjectByIDAndType           = 0x80001B74; // type:func
func_80001BE4_27E4                     = 0x80001BE4; // type:func
func_80001CA0_28A0                     = 0x80001CA0; // type:func
func_80001DD4_29D4                     = 0x80001DD4; // type:func
func_80001EB4_2AB4                     = 0x80001EB4; // type:func
findNextMapObjectInstance              = 0x8000204C; // type:func
findFirstMapObjectInstance             = 0x800020D8; // type:func
func_8000211C_2D1C                     = 0x8000211C; // type:func
object_allocEntryInList                = 0x8000219C; // type:func
object_allocEntryInListAndClear        = 0x800021F4; // type:func
object_allocGraphicContainerEntryInList                     = 0x80002264; // type:func
object_freeData                     = 0x800022BC; // type:func
GameStateMgr_execute                   = 0x80002334; // type:func
object_executeChildObject              = 0x800023D4; // type:func
object_execute                         = 0x800024AC; // type:func
func_80002570_3170                     = 0x80002570; // type:func
func_800026D8_32D8                     = 0x800026D8; // type:func
object_destroyChildrenAndModelInfo     = 0x80002740; // type:func
GameStateMgr_destroy                   = 0x800027B4; // type:func
func_800027BC_33BC                     = 0x800027BC; // type:func
func_8000287C_347C                     = 0x8000287C; // type:func

// .data
Objects_functions                      = 0x80092274; // size:0x8A8
objects_array                          = 0x80342060;
objects_number_of_instances_per_object = 0x8034CE60;

// .bss
object_list_free_slot                  = 0x800A7830;
ptr_gameplayParentObject               = 0x800A7834;

// End of src/object.c =========================================================


// src/fade.c ==================================================================

// .text
Fade_setAllFlags          = 0x8000E590; // type:func
Fade_setFlag              = 0x8000E5A8; // type:func
Fade_removeFlag           = 0x8000E5CC; // type:func
Fade_setColor             = 0x8000E5F4; // type:func
Fade_SetSettings          = 0x8000E618; // type:func
Fade_IsFading             = 0x8000E67C; // type:func
Fade_Calc                 = 0x8000E6C4; // type:func

// .data
dl_fade_normal            = 0x80093370; // rom:0x00093F70 size:0x60
dl_fade_with_outline      = 0x800933D0; // rom:0x00093FD0 size:0x60
// .rodata

// End of src/fade.c ===========================================================


// src/object_flow.c ===========================================================

object_doNothing                               = 0x8000E860; // type:func
object_goToNextFuncNoCondition                 = 0x8000E868; // type:func
object_goToNextFuncIfTimerIsTwo                = 0x8000E898; // type:func
object_goToNextFuncIfTimerIsThree              = 0x8000E8E0; // type:func
object_fadeOutNineFramesAndGoToNextFunc        = 0x8000E928; // type:func
object_fadeOutFifteenFramesAndGoToNextFunc     = 0x8000E97C; // type:func
object_fadeOutTwentyOneFramesAndGoToNextFunc   = 0x8000E9D0; // type:func
object_fadeOutThirtyFramesAndGoToNextFunc      = 0x8000EA24; // type:func
object_fadeOutFortyFiveFramesAndGoToNextFunc   = 0x8000EA78; // type:func
object_fadeOutSixtyFramesAndGoToNextFunc       = 0x8000EACC; // type:func
object_goToNextFuncIfNotFading                 = 0x8000EB20; // type:func
GameStateMgr_setupGameState                    = 0x8000EB64; // type:func
GameStateMgr_executeGameStateUncappedFramerate = 0x8000EC24; // type:func
GameStateMgr_executeGameStateCappedFramerate   = 0x8000ECB0; // type:func

// End of src/object_flow.c ====================================================


// src/vec3f.c =================================================================

// .text
func_80011310_11F10  = 0x80011310; // type:func
func_80011370_11F70  = 0x80011370; // type:func
vec3f_distance       = 0x800113CC; // type:func
vec3f_magnitude      = 0x80011400; // type:func
vec3f_80011440       = 0x80011440; // type:func
vec3f_add            = 0x800114C0; // type:func
vec3f_substract      = 0x800114F4; // type:func
vec3f_copy           = 0x80011528; // type:func
vec3f_swap           = 0x80011544; // type:func
vec3f_multiplyScalar = 0x80011588; // type:func
vec3f_percentage     = 0x800115B4; // type:func
vec3f_complement     = 0x800115EC; // type:func
vec3f_80011614       = 0x80011614; // type:func
vec3f_dotProduct     = 0x8001166C; // type:func
vec3f_crossProduct   = 0x8001169C; // type:func
vec3f_80011710       = 0x80011710; // type:func
vec3f_set            = 0x80011760; // type:func
vec3f_multiplyByOne  = 0x80011780; // type:func
vec3f_800117a4       = 0x800117A4; // type:func
vec3f_80011808       = 0x80011808; // type:func
func_80011880        = 0x80011880; // type:func
func_80011914_12514  = 0x80011914; // type:func
func_80011984_12584  = 0x80011984; // type:func
func_800119F0_125F0  = 0x800119F0; // type:func

// End of src/vec3f.c ==========================================================


// src/12700.c =================================================================

// .text
f32_trunc                   = 0x80011B00; // type:func
f32_simple_round_nearest    = 0x80011B18; // type:func
f32_round_nearest_with_sign = 0x80011B74; // type:func
f32_normalize               = 0x80011BCC; // type:func
f32_clamp                   = 0x80011C2C; // type:func
func_80011C6C_1286C         = 0x80011C6C; // type:func

// End of src/12700.c ==========================================================


// src/dma.c ===================================================================

// .text
DMA_InitCart   = 0x80017710; // type:func
DMA_readWrite  = 0x80017734; // type:func
DMA_ROMCopy    = 0x800177EC; // type:func

// .bss
dmaIoMesgBuf   = 0x800D5E60;
dmaIoMesgQueue = 0x800ABFA0;
gCartHandle    = 0x800D5E78;

// End of src/dma.c ============================================================


// src/debug.c =================================================================

// .text
func_80019BC0_1A7C0              = 0x80019BC0; // type:func
func_80019BC8_1A7C8              = 0x80019BC8; // type:func
func_80019BD0_1A7D0              = 0x80019BD0; // type:func
func_80019BE4_1A7E4              = 0x80019BE4; // type:func
func_80019BF8_1A7F8              = 0x80019BF8; // type:func
processMeter_updateTiming            = 0x80019C00; // type:func
processMeter_setSizeDivisor      = 0x80019CE0; // type:func
processMeter_update              = 0x80019CEC; // type:func
processMeter_render              = 0x80019E68; // type:func
processMeter_renderDivisions     = 0x8001A004; // type:func
processMeter_renderBar           = 0x8001A0B8; // type:func

// .data
processMeter_number_of_divisions = 0x80096AC0; // type:s32
processBar_sizeDivisor           = 0x80096AC4; // type:f32

// .rodata
D_800A3080_A3C80                 = 0x800A3080; // type:f64
D_800A3088_A3C88                 = 0x800A3088; // type:f64
D_800A3090_A3C90                 = 0x800A3090; // type:f64
D_800A3098_A3C98                 = 0x800A3098; // type:f64
D_800A30A0_A3CA0                 = 0x800A30A0; // type:asciz
D_800A30B4_A3CB4                 = 0x800A30B4; // type:asciz
D_800A30C0_A3CC0                 = 0x800A30C0; // type:asciz
D_800A30C8_A3CC8                 = 0x800A30C8; // type:asciz
D_800A30D4_A3CD4                 = 0x800A30D4; // type:asciz

// .bss
processMeter_greenBar_beginTime  = 0x800d7120; // type:f64
processMeter_greenBar_endTime    = 0x800d7128; // type:f64
processMeter_blueBar_beginTime   = 0x800d7130; // type:f64
processMeter_blueBar_endTime     = 0x800d7138; // type:f64
processMeter_greenBarSize        = 0x800d7140; // type:f32
processMeter_blueBarSize         = 0x800d7144; // type:f32

// End of src/debug.c ==========================================================


// src/effect_manager.c ========================================================

// .text
effectMgr_entrypoint = 0x8005AEC0; // type:func
effectMgr_init       = 0x8005AF30; // type:func
effectMgr_loop       = 0x8005AF84; // type:func
func_8005AF8C        = 0x8005AF8C; // type:func
func_8005AF94        = 0x8005AF94; // type:func

// .data
effectMgr_functions  = 0x8009AD60; // size:0x08

// .bss
ptr_effectMgr        = 0x800DD0D0;

// End of src/effect_manager.c =================================================


// asm/libultra/gu/align.s =====================================================

// .text
guAlignF          = 0x8007FB00; // type:func
guAlign           = 0x8007FC94; // type:func

// .rodata
align_rodata_0000 = 0x800A6D70;

// End of asm/libultra/gu/align.s ==============================================


// asm/libultra/gu/sinf.s ======================================================

// .text
sinf             = 0x8007FCF0; // type:func

// .rodata
sinf_rodata_0000 = 0x800A6D80;
sinf_rodata_0028 = 0x800A6DA8;
sinf_rodata_0030 = 0x800A6DB0;
sinf_rodata_0038 = 0x800A6DB8;
sinf_rodata_0040 = 0x800A6DC0;

// End of asm/libultra/gu/sinf.s ===============================================


// asm/libultra/gu/rotate.s ====================================================

// .text

// .rodata
rotate_rodata_0000 = 0x800A6E20;

// End of asm/libultra/gu/rotate.s =============================================


// asm/libultra/os/initialize.s ================================================

// .text
osInitialize       = 0x80081D80; // type:func
__createSpeedParam = 0x80082028; // type:func

// .data
osClockRate        = 0x800A0FF0; // type:u64
osViClock          = 0x800A0FF8;
__osShutdown       = 0x800A0FFC;
__OSGlobalIntMask  = 0x800A1000; // type:u32 size:0x04

// End of asm/libultra/os/initialize.s =========================================


// asm/libultra/libc/ll.s ======================================================

// .text
__ull_rshift  = 0x800820D0; // type:func
__ull_rem     = 0x800820FC; // type:func
__ull_div     = 0x80082138; // type:func
__ll_lshift   = 0x80082174; // type:func
__ll_rem      = 0x800821A0; // type:func
__ll_div      = 0x800821DC; // type:func
__ll_mul      = 0x80082238; // type:func
__ull_divremi = 0x80082268; // type:func
__ll_mod      = 0x800822C8; // type:func
__ll_rshift   = 0x80082364; // type:func

// End of asm/libultra/libc/ll.s ===============================================


// asm/libultra/libc/bzero.s ===================================================

// .text
_bzero = 0x80082390; // type:func

// End of asm/libultra/libc/bzero.s ============================================


// asm/libultra/os/setsr.s =====================================================

// .text
__osSetSR = 0x80082490; // type:func

// End of asm/libultra/os/setsr.s ==============================================


// asm/libultra/os/getsr.s =====================================================

// .text
__osGetSR = 0x800824A0; // type:func

// End of asm/libultra/os/getsr.s ==============================================


// asm/libultra/audio/synsetfxparam.s ==========================================

// .text
alSynSetFXParam = 0x800824B0; // type:func

// End of asm/libultra/audio/synsetfxparam.s ===================================


// asm/libultra/io/vigetnextframebuf.s =========================================

// .text
osViGetNextFramebuffer = 0x800824F0; // type:func

// End of asm/libultra/io/vigetnextframebuf.s ==================================


// asm/libultra/audio/synstartvoice.s ==========================================

// .text
alSynStartVoice = 0x80082530; // type:func

// End of asm/libultra/audio/synstartvoice.s ===================================


// asm/libultra/io/sprawdma.s ==================================================

// .text
__osSpRawStartDma = 0x800825C0; // type:func

// End of asm/libultra/io/sprawdma.s ===========================================


// asm/libultra/io/sirawdma.s ==================================================

// .text
__osSiRawStartDma = 0x80082650; // type:func

// End of asm/libultra/io/sirawdma.s ===========================================


// asm/libultra/io/viblack.s ===================================================

// .text
osViBlack = 0x80082700; // type:func

// End of asm/libultra/io/viblack.s ============================================


// asm/libultra/io/pirawread.s =================================================

// .text
__osPiRawReadIo = 0x80082770; // type:func

// End of asm/libultra/io/pirawread.s ==========================================


// asm/libultra/io/sirawread.s =================================================

// .text
__osSiRawReadIo = 0x800827C0; // type:func

// End of asm/libultra/io/sirawread.s ==========================================


// asm/libultra/io/sptaskyield.s ===============================================

// .text
osSpTaskYield = 0x80082810; // type:func

// End of asm/libultra/io/sptaskyield.s ========================================


// asm/libultra/io/pfsreadwritefile.s ==========================================

// .text
__osPfsGetNextPage = 0x80082830; // type:func
osPfsReadWriteFile = 0x80082904; // type:func

// End of asm/libultra/io/pfsreadwritefile.s ===================================


// asm/libultra/io/pfsgetstatus.s ==============================================

// .text
__osPfsGetStatus         = 0x80082C80; // type:func
__osPfsRequestOneChannel = 0x80082D50; // type:func
__osPfsGetOneChannelData = 0x80082E14; // type:func

// End of asm/libultra/io/pfsgetstatus.s =======================================


// asm/libultra/gu/mtxutil.s ===================================================

// .text
guMtxF2L    = 0x80082EB0; // type:func
guMtxIdentF = 0x80082FB0; // type:func
guMtxIdent  = 0x80083038; // type:func
guMtxL2F    = 0x80083068; // type:func

// End of asm/libultra/gu/mtxutil.s ============================================


// asm/libultra/io/visetmode.s =================================================

// .text
osViSetMode = 0x80083120; // type:func

// End of asm/libultra/io/visetmode.s ==========================================


// asm/libultra/io/motor.s =====================================================

// .text
__osMotorAccess   = 0x80083190; // type:func
__osMakeMotorData = 0x800832F8; // type:func
osMotorInit       = 0x80083404; // type:func

// .bss
__MotorDataBuf    = 0x801229B0;

// End of asm/libultra/io/motor.s ==============================================


// asm/libultra/io/pfsallocatefile.s ===========================================

// .text
osPfsAllocateFile  = 0x80083560; // type:func
__osPfsDeclearPage = 0x80083894; // type:func

// End of asm/libultra/io/pfsallocatefile.s ====================================


// asm/libultra/io/pfsisplug.s =================================================

// .text
osPfsIsPlug        = 0x800839E0; // type:func
__osPfsRequestData = 0x80083B80; // type:func
__osPfsGetInitData = 0x80083C50; // type:func

// .bss
__osPfsPifRam = 0x80122AB0;

// End of asm/libultra/io/pfsisplug.s ==========================================


// asm/libultra/audio/synsetpitch.s ============================================

// .text
alSynSetPitch = 0x80083D20; // type:func

// End of asm/libultra/audio/synsetpitch.s =====================================


// asm/libultra/os/probetlb.s ==================================================

// .text
__osProbeTLB = 0x80083DB0; // type:func

// End of asm/libultra/os/probetlb.s ===========================================


// asm/libultra/io/pimgr.s =====================================================

// .text
osCreatePiManager = 0x80083E70; // type:func

// .data
__osPiDevMgr      = 0x800A2190;
__osPiTable       = 0x800A21AC;
__osCurrentHandle = 0x800A21B0;

// .bss
__Dom1SpeedParam  = 0x80122AF0;
__Dom2SpeedParam  = 0x80122B68;
piThread       = 0x80122be0;
piStackThread = 0x80122D90;
piEventQueue   = 0x80123D90;
piEventBuf     = 0x80123DA8;

// End of asm/libultra/io/pimgr.s ==============================================


// asm/libultra/io/devmgr.s ====================================================

// .text
__osDevMgrMain     = 0x80083FE0; // type:func

// .rodata
devmgr_rodata_0000 = 0x800A6E30; // type:jtbl

// End of asm/libultra/io/devmgr.s =============================================


// asm/libultra/io/pirawdma.s ==================================================

// .text
__osPiRawStartDma = 0x800843F0; // type:func

// End of asm/libultra/io/pirawdma.s ===========================================


// asm/libultra/audio/synsetpan.s ==============================================

// .text
alSynSetPan = 0x800844C0; // type:func

// End of asm/libultra/audio/synsetpan.s =======================================


// asm/libultra/os/getcount.s ==================================================

// .text
osGetCount = 0x80084550; // type:func

// End of asm/libultra/os/getcount.s ===========================================


// asm/libultra/io/contpfs.s ===================================================

// .text
__osSumcalc              = 0x80084560; // type:func
__osIdCheckSum           = 0x800845D4; // type:func
__osRepairPackId         = 0x800846D0; // type:func
__osCheckPackId          = 0x80084A20; // type:func
__osGetId                = 0x80084B84; // type:func
__osCheckId              = 0x80084D30; // type:func
__osPfsRWInode           = 0x80084E04; // type:func

// .data
__osPfsInodeCacheChannel = 0x800A21C0;
__osPfsInodeCacheBank    = 0x800A21C4;

// .bss
__osPfsInodeCache        = 0x80123DB0;

// End of asm/libultra/io/contpfs.s ============================================


// asm/libultra/io/pidma.s =====================================================

// .text
osPiStartDma = 0x800850E0; // type:func

// End of asm/libultra/io/pidma.s ==============================================


// asm/libultra/io/pfssearchfile.s =============================================

// .text
osPfsFindFile = 0x800851F0; // type:func

// End of asm/libultra/io/pfssearchfile.s ======================================


// asm/libultra/audio/synthesizer.s ============================================

// .text
alSynNew              = 0x800853C0; // type:func
alAudioFrame          = 0x800856C0; // type:func
__allocParam          = 0x80085890; // type:func
__freeParam           = 0x800858C0; // type:func
_collectPVoices       = 0x800858D8; // type:func
_freePVoice           = 0x80085938; // type:func
_timeToSamplesNoRound = 0x80085970; // type:func
_timeToSamples        = 0x800859BC; // type:func
__nextSampleTime      = 0x800859E4; // type:func

// End of asm/libultra/audio/synthesizer.s =====================================


// asm/libultra/audio/drvrnew.s ================================================

// .text
init_lpfilter       = 0x80085A40; // type:func
alFxNew             = 0x80085AE0; // type:func
alEnvmixerNew       = 0x80085F1C; // type:func
alLoadNew           = 0x80085FC4; // type:func
alResampleNew       = 0x8008606C; // type:func
alAuxBusNew         = 0x800860F8; // type:func
alMainBusNew        = 0x8008614C; // type:func
alSaveNew           = 0x800861A0; // type:func

// .data
SMALLROOM_PARAMS    = 0x800A21D0;
BIGROOM_PARAMS      = 0x800A2238;
ECHO_PARAMS         = 0x800A22C0;
CHORUS_PARAMS       = 0x800A22E8;
FLANGE_PARAMS       = 0x800A2310;
NULL_PARAMS         = 0x800A2338;

// .rodata
drvrNew_rodata_0000 = 0x800A6E60; // type:jtbl
drvrnew_CONVERT     = 0x800A6E78;

// End of asm/libultra/audio/drvrnew.s =========================================


// asm/libultra/audio/mainbus.s ================================================

// .text
alMainBusParam = 0x800861F0; // type:func
alMainBusPull  = 0x80086220; // type:func

// End of asm/libultra/audio/mainbus.s =========================================


// asm/libultra/audio/reverb.s =================================================

// .text
alFxPull           = 0x80086340; // type:func
alFxParam          = 0x80086680; // type:func
alFxParamHdl       = 0x80086698; // type:func
_loadOutputBuffer  = 0x800868F4; // type:func
_loadBuffer        = 0x80086B14; // type:func
_saveBuffer        = 0x80086CAC; // type:func
_filterBuffer      = 0x80086E40; // type:func
_doModFunc         = 0x80086EF0; // type:func

// .rodata
reverb_rodata_0000 = 0x800A6E80; // type:jtbl
reverb_CONVERT     = 0x800A6EA0;

// End of asm/libultra/audio/reverb.s ==========================================


// asm/libultra/audio/auxbus.s =================================================

// .text
alAuxBusParam = 0x80086FA0; // type:func
alAuxBusPull  = 0x80086FD0; // type:func

// End of asm/libultra/audio/auxbus.s ==========================================


// asm/libultra/audio/env.s ====================================================

// .text
alEnvmixerPull   = 0x800870B0; // type:func
alEnvmixerParam  = 0x800875B8; // type:func
_pullSubFrame    = 0x80087698; // type:func
_frexpf          = 0x80087980; // type:func
_ldexpf          = 0x80087A6C; // type:func
_getRate         = 0x80087A94; // type:func
_getVol          = 0x80087C78; // type:func

// .data
eqpower          = 0x800A2380; // size:0x100
env_data_0100    = 0x800A2480;

// .rodata
env_rodata_0000  = 0x800A6EB0; // type:jtbl
M_LN2            = 0x800A6EF8;
D_800A6F00_A7B00 = 0x800A6F00;

// End of asm/libultra/audio/env.s =============================================


// asm/libultra/audio/resample.s ===============================================

// .text
alResampleParam      = 0x80087D30; // type:func
alResamplePull       = 0x80087E1C; // type:func

// .rodata
resample_rodata_0000 = 0x800A6F10; // type:jtbl
resample_rodata_0028 = 0x800A6F38;
resample_rodata_0030 = 0x800A6F40;

// End of asm/libultra/audio/resample.s ========================================


// asm/libultra/audio/load.s ===================================================

// .text
alLoadParam  = 0x80088030; // type:func
alRaw16Pull  = 0x80088204; // type:func
_decodeChunk = 0x800885B0; // type:func
alAdpcmPull  = 0x800886DC; // type:func

// End of asm/libultra/audio/load.s ============================================


// asm/libultra/os/seteventmesg.s ==============================================

// .text
osSetEventMesg    = 0x80088B80; // type:func

// .data
__osPreNMI        = 0x800a24c0;

// .bss
__osEventStateTab = 0x80123eb0;

// End of asm/libultra/os/seteventmesg.s =======================================


// asm/libultra/gu/sqrtf.s =====================================================

// .text
sqrtf = 0x80088C40; // type:func

// End of asm/libultra/gu/sqrtf.s ==============================================


// asm/libultra/os/afterprenmi.s ===============================================

// .text
osAfterPreNMI = 0x80088C50; // type:func

// End of asm/libultra/os/afterprenmi.s ========================================


// asm/libultra/io/contquery.s =================================================

// .text
osContStartQuery = 0x80088C70; // type:func
osContGetQuery   = 0x80088CF4; // type:func

// End of asm/libultra/io/contquery.s ==========================================


// asm/libultra/gu/random.s ====================================================

// .text
guRandom = 0x80088D20; // type:func

// .data
xseed    = 0x800A24D0;

// End of asm/libultra/gu/random.s =============================================


// asm/libultra/os/unmaptlb.s ==================================================

// .text
osUnmapTLB = 0x80088D50; // type:func

// End of asm/libultra/os/unmaptlb.s ===========================================


// asm/libultra/libc/xprintf.s =================================================

// .text
_Putfld = 0x80088D90; // type:func
_Printf = 0x80089400; // type:func

// .data
spaces  = 0x800a24e0;
zeroes  = 0x800a2504;

// .rodata
hlL     = 0x800A6F50;
fchar   = 0x800A6F54;
fbit    = 0x800A6F5C;
// jtbl_800A6F74_A7B74 = 0x800A6F74; // type:jtbl

// End of asm/libultra/libc/xprintf.s ==========================================


// asm/libultra/audio/filter.s =================================================

// .text
alFilterNew = 0x80089A50; // type:func

// End of asm/libultra/audio/filter.s ==========================================


// asm/libultra/gu/ortho.s =====================================================

// .text
guOrthoF = 0x80089A70; // type:func
guOrtho  = 0x80089BC4; // type:func

// End of asm/libultra/gu/ortho.s ==============================================


// asm/libultra/os/unmaptlball.s ===============================================

// .text
osUnmapTLBAll = 0x80089C30; // type:func

// End of asm/libultra/os/unmaptlball.s ========================================


// asm/libultra/io/epidma.s ====================================================

// .text
osEPiStartDma = 0x80089C80; // type:func

// End of asm/libultra/io/epidma.s =============================================


// asm/libultra/audio/heapinit.s ===============================================

// .text
alHeapInit = 0x80089D60; // type:func

// End of asm/libultra/audio/heapinit.s ========================================


// asm/libultra/libc/string.s ==================================================

// .text
memcpy = 0x80089DA0; // type:func
strlen = 0x80089DCC; // type:func
strchr = 0x80089DF4; // type:func

// End of asm/libultra/libc/string.s ===========================================


// asm/libultra/os/invalicache.s ===============================================

// .text
osInvalICache = 0x80089E40; // type:func

// End of asm/libultra/os/invalicache.s ========================================


// asm/libultra/os/createmesgqueue.s ===========================================

// .text
osCreateMesgQueue = 0x80089EC0; // type:func

// End of asm/libultra/os/createmesgqueue.s ====================================


// asm/libultra/os/invaldcache.s ===============================================

// .text
osInvalDCache = 0x80089EF0; // type:func

// End of asm/libultra/os/invaldcache.s ========================================


// asm/libultra/audio/synsetfxmix.s ============================================

// .text
alSynSetFXMix = 0x80089FA0; // type:func

// End of asm/libultra/audio/synsetfxmix.s =====================================


// asm/libultra/audio/save.s ===================================================

// .text
alSavePull  = 0x8008A040; // type:func
alSaveParam = 0x8008A0CC; // type:func

// End of asm/libultra/audio/save.s ============================================


// asm/libultra/io/pfsrepairid.s ===============================================

// .text
osPfsRepairId = 0x8008A100; // type:func

// End of asm/libultra/io/pfsrepairid.s ========================================


// asm/libultra/audio/syngetfxref.s ============================================

// .text
alSynGetFXRef = 0x8008A160; // type:func

// End of asm/libultra/audio/syngetfxref.s =====================================


// asm/libultra/io/sp.s ========================================================

// .text
__osSpDeviceBusy = 0x8008A1E0; // type:func

// End of asm/libultra/io/sp.s =================================================


// asm/libultra/io/si.s ========================================================

// .text
__osSiDeviceBusy = 0x8008A210; // type:func

// End of asm/libultra/io/si.s =================================================


// asm/libultra/gu/translate.s =================================================

// .text
guTranslateF = 0x8008A240; // type:func
guTranslate  = 0x8008A288; // type:func

// End of asm/libultra/gu/translate.s ==========================================


// asm/libultra/os/jammesg.s ===================================================

// .text
osJamMesg = 0x8008A2E0; // type:func

// End of asm/libultra/os/jammesg.s ============================================


// asm/libultra/os/setthreadpri.s ==============================================

// .text
osSetThreadPri = 0x8008A430; // type:func

// End of asm/libultra/os/setthreadpri.s =======================================


// asm/libultra/os/getthreadpri.s ==============================================

// .text
osGetThreadPri = 0x8008A510; // type:func

// End of asm/libultra/os/getthreadpri.s =======================================


// asm/libultra/io/epirawread.s ================================================

// .text
__osEPiRawReadIo = 0x8008A530; // type:func

// End of asm/libultra/io/epirawread.s =========================================


// asm/libultra/io/viswapbuf.s =================================================

// .text
osViSwapBuffer = 0x8008A690; // type:func

// End of asm/libultra/io/viswapbuf.s ==========================================


// asm/libultra/gu/lookat.s ====================================================

// .text
guLookAtF = 0x8008A6E0; // type:func
guLookAt  = 0x8008A998; // type:func

// End of asm/libultra/gu/lookat.s =============================================


// asm/libultra/gu/position.s ==================================================

// .text
guPositionF       = 0x8008AA10; // type:func
guPosition        = 0x8008ABC0; // type:func

// .rodata
position_dtor     = 0x800A7050;

// .bss
position_bss_0000 = 0x80123f30;

// End of asm/libultra/gu/position.s ===========================================


// asm/libultra/io/epirawdma.s =================================================

// .text
__osEPiRawStartDma = 0x8008AC30; // type:func

// End of asm/libultra/io/epirawdma.s ==========================================


// asm/libultra/io/sptaskyielded.s =============================================

// .text
osSpTaskYielded = 0x8008AE10; // type:func

// End of asm/libultra/io/sptaskyielded.s ======================================


// asm/libultra/libc/bcmp.s ====================================================

// .text
_bcmp = 0x8008AE90; // type:func

// End of asm/libultra/libc/bcmp.s =============================================


// asm/libultra/os/gettime.s ===================================================

// .text
osGetTime = 0x8008AFB0; // type:func

// End of asm/libultra/os/gettime.s ============================================


// asm/libultra/os/timerintr.s =================================================

// .text
__osTimerServicesInit = 0x8008B040; // type:func
__osTimerInterrupt    = 0x8008B0CC; // type:func
__osSetTimerIntr      = 0x8008B244; // type:func
__osInsertTimer       = 0x8008B2B8; // type:func

// .data
__osTimerList         = 0x800A2530;

// .bss
__osBaseTimer         = 0x80123F40;
__osCurrentTime       = 0x80123F60;
__osBaseCounter       = 0x80123F68;
__osViIntrCount       = 0x80123F6C;
__osTimerCounter      = 0x80123F70;

// End of asm/libultra/os/timerintr.s ==========================================


// asm/libultra/os/setglobalintmask.s ==========================================

// .text
__osSetGlobalIntMask = 0x8008B440; // type:func

// End of asm/libultra/os/setglobalintmask.s ===================================


// asm/libultra/io/aisetfreq.s =================================================

// .text
osAiSetFrequency = 0x8008B490; // type:func

// End of asm/libultra/io/aisetfreq.s ==========================================


// asm/libultra/gu/normalize.s =================================================

// .text
guNormalize = 0x8008B5E0; // type:func

// End of asm/libultra/gu/normalize.s ==========================================


// asm/libultra/os/setcompare.s ================================================

// .text
__osSetCompare = 0x8008B670; // type:func

// End of asm/libultra/os/setcompare.s =========================================


// asm/libultra/libc/bcopy.s ===================================================

// .text
_bcopy = 0x8008B680; // type:func

// End of asm/libultra/libc/bcopy.s ============================================


// asm/libultra/audio/copy.s ===================================================

// .text
alCopy = 0x8008B990; // type:func

// End of asm/libultra/audio/copy.s ============================================


// asm/libultra/os/resetglobalintmask.s ========================================

// .text
__osResetGlobalIntMask = 0x8008BA10; // type:func

// End of asm/libultra/os/resetglobalintmask.s =================================


// asm/libultra/io/pfsdeletefile.s =============================================

// .text
osPfsDeleteFile     = 0x8008BA70; // type:func
__osPfsReleasePages = 0x8008BC48; // type:func

// End of asm/libultra/io/pfsdeletefile.s ======================================


// asm/libultra/os/interrupt.s =================================================

// .text
__osDisableInt = 0x8008BCE0; // type:func
__osRestoreInt = 0x8008BD50; // type:func

// End of asm/libultra/os/interrupt.s ==========================================


// asm/libultra/io/vi.s ========================================================

// .text
__osViInit  = 0x8008BD70; // type:func

// .data
vi          = 0x800A2540;
__osViCurr  = 0x800A25A0;
__osViNext  = 0x800A25A4;

// End of asm/libultra/io/vi.s =================================================


// asm/libultra/io/viswapcontext.s =============================================

// .text
__osViSwapContext = 0x8008BEB0; // type:func

// End of asm/libultra/io/viswapcontext.s ======================================


// asm/libultra/io/pigetcmdq.s =================================================

// .text
osPiGetCmdQueue = 0x8008C1B0; // type:func

// End of asm/libultra/io/pigetcmdq.s ==========================================


// asm/libultra/gu/cosf.s ======================================================

// .text
__cosf = 0x8008C1E0; // type:func

// .rodata
P      = 0x800A7060;
rpi    = 0x800A7088;
pihi   = 0x800A7090;
pilo   = 0x800A7098;
zero   = 0x800A70A0;

// End of asm/libultra/gu/cosf.s ===============================================


// asm/libultra/gu/coss.s ======================================================

// .text
coss = 0x8008C350; // type:func

// End of asm/libultra/gu/coss.s ===============================================


// asm/libultra/io/visetspecial.s ==============================================

// .text
osViSetSpecialFeatures = 0x8008C380; // type:func

// End of asm/libultra/io/visetspecial.s =======================================


// asm/libultra/io/visetevent.s ================================================

// .text
osViSetEvent = 0x8008C4E0; // type:func

// End of asm/libultra/io/visetevent.s =========================================


// asm/libultra/audio/synaddplayer.s ===========================================

// .text
alSynAddPlayer = 0x8008C550; // type:func

// End of asm/libultra/audio/synaddplayer.s ====================================


// asm/libultra/io/pfsnumfiles.s ===============================================

// .text
osPfsNumFiles = 0x8008C5A0; // type:func

// End of asm/libultra/io/pfsnumfiles.s ========================================


// asm/libultra/io/cartrominit.s ===============================================

// .text
osCartRomInit   = 0x8008C6D0; // type:func

// .data
first           = 0x800A26A0;

// .bss
__CartRomHandle = 0x80123F80;

// End of asm/libultra/io/cartrominit.s ========================================


// asm/libultra/io/pfsselectbank.s =============================================

// .text
__osPfsSelectBank = 0x8008C830; // type:func

// End of asm/libultra/io/pfsselectbank.s ======================================


// asm/libultra/os/setfpccsr.s =================================================

// .text
__osSetFpcCsr = 0x8008C8B0; // type:func

// End of asm/libultra/os/setfpccsr.s ==========================================


// asm/libultra/io/pfsfilestate.s ==============================================

// .text
osPfsFileState = 0x8008C8C0; // type:func

// End of asm/libultra/io/pfsfilestate.s =======================================


// asm/libultra/io/pfsinitpak.s ================================================

// .text
osPfsInitPak        = 0x8008CAA0; // type:func
__osPfsCheckRamArea = 0x8008CCA8; // type:func

// End of asm/libultra/io/pfsinitpak.s =========================================


// asm/libultra/io/pfschecker.s ================================================

// .text
osPfsChecker   = 0x8008CDB0; // type:func
corrupted_init = 0x8008D2E8; // type:func
corrupted      = 0x8008D5B4; // type:func

// End of asm/libultra/io/pfschecker.s =========================================


// asm/libultra/io/aigetlen.s ==================================================

// .text
osAiGetLength = 0x8008D750; // type:func

// End of asm/libultra/io/aigetlen.s ===========================================


// asm/libultra/io/piwrite.s ===================================================

// .text
osPiWriteIo = 0x8008D760; // type:func

// End of asm/libultra/io/piwrite.s ============================================


// asm/libultra/os/maptlbrdb.s =================================================

// .text
osMapTLBRdb = 0x8008D7A0; // type:func

// End of asm/libultra/os/maptlbrdb.s ==========================================


// asm/libultra/os/yeildthread.s ===============================================

// .text
osYieldThread = 0x8008D800; // type:func

// End of asm/libultra/os/yeildthread.s ========================================


// asm/libultra/audio/synstartvoiceparam.s =====================================

// .text
alSynStartVoiceParams = 0x8008D850; // type:func

// End of asm/libultra/audio/synstartvoiceparam.s ==============================


// asm/libultra/os/getcause.s ==================================================

// .text
__osGetCause = 0x8008D930; // type:func

// End of asm/libultra/os/getcause.s ===========================================


// asm/libultra/io/contramwrite.s ==============================================

// .text
__osContRamWrite = 0x8008D940; // type:func

// End of asm/libultra/io/contramwrite.s =======================================


// asm/libultra/io/contramread.s ===============================================

// .text
__osContRamRead    = 0x8008DB90; // type:func

// .data
__osPfsLastChannel = 0x800A26B0;

// End of asm/libultra/io/contramread.s ========================================


// asm/libultra/io/crc.s =======================================================

// .text
__osContAddressCrc = 0x8008DDC0; // type:func
__osContDataCrc    = 0x8008DE90; // type:func

// End of asm/libultra/io/crc.s ================================================


// asm/libultra/io/epirawwrite.s ===============================================

// .text
__osEPiRawWriteIo = 0x8008DF30; // type:func

// End of asm/libultra/io/epirawwrite.s ========================================


// asm/libultra/os/settimer.s ==================================================

// .text
osSetTimer = 0x8008E090; // type:func

// End of asm/libultra/os/settimer.s ===========================================


// asm/libultra/libc/xldtob.s ==================================================

// .text
// xldtob_text_0000  = 0x8008e170; // type:func
_Ldtob             = 0x8008e6e0; // type:func

// .rodata
pows               = 0x800A70C0;
NaN                = 0x800A7108;
Inf                = 0x800A710C;
xldtob_rodata_0058 = 0x800A7118;

// End of asm/libultra/libc/xldtob.s ===========================================


// asm/libultra/libc/ldiv.s ====================================================

// .text
lldiv = 0x8008EC30; // type:func
ldiv  = 0x8008ED30; // type:func

// End of asm/libultra/libc/ldiv.s =============================================


// asm/libultra/libc/xlitob.s ==================================================

// .text
_Litob           = 0x8008EDC0; // type:func

// .data
xlitob_data_0000 = 0x800A26C0;
xlitob_data_0014 = 0x800A26D4;

// End of asm/libultra/libc/xlitob.s ===========================================


// asm/libultra/io/sirawwrite.s ================================================

// .text
__osSiRawWriteIo = 0x8008F060; // type:func

// End of asm/libultra/io/sirawwrite.s =========================================


// asm/libultra/io/pirawwrite.s ================================================

// .text
osPiRawWriteIo = 0x8008F0B0; // type:func

// End of asm/libultra/io/pirawwrite.s =========================================


// asm/libultra/io/spsetstat.s =================================================

// .text
__osSpSetStatus = 0x8008F100; // type:func

// End of asm/libultra/io/spsetstat.s ==========================================


// asm/libultra/io/spgetstat.s =================================================

// .text
__osSpGetStatus = 0x8008F110; // type:func

// End of asm/libultra/io/spgetstat.s ==========================================


// asm/libultra/io/vimgr.s =====================================================

// .text
osCreateViManager = 0x8008F120; // type:func
viMgrMain         = 0x8008F2A0; // type:func

// .data
__osViDevMgr          = 0x800A26F0;
__additional_scanline = 0x800A270C;

// .bss
viMgrThread           = 0x80124000;
__osViMesgQueue       = 0x801251B0;
viMgrMesgBuff         = 0x801251C8;
viEventViMesg         = 0x801251E0;
viEventCounterMesg    = 0x801251F8;
viRetrace             = 0x80125210;

// End of asm/libultra/io/vimgr.s ==============================================


// asm/libultra/io/vigetcurrcontext.s ==========================================

// .text
__osViGetCurrentContext = 0x8008F430; // type:func

// End of asm/libultra/io/vigetcurrcontext.s ===================================


// asm/libultra/os/writebackdcacheall.s ========================================

// .text
osWritebackDCacheAll = 0x8008F440; // type:func

// End of asm/libultra/os/writebackdcacheall.s =================================


// asm/libultra/audio/heapalloc.s ==============================================

// .text
alHeapDBAlloc = 0x8008F470; // type:func

// End of asm/libultra/audio/heapalloc.s =======================================


// asm/libultra/os/getcurrfaultthread.s ========================================

// .text
__osGetCurrFaultedThread = 0x8008F4D0; // type:func

// End of asm/libultra/os/getcurrfaultthread.s =================================


// asm/libultra/gu/rotaterpy.s =================================================

// .text
guRotateRPYF = 0x8008F4E0; // type:func
guRotateRPY  = 0x8008F62C; // type:func

// .rodata
rotate_dtor  = 0x800A7120;

// End of asm/libultra/gu/rotaterpy.s ==========================================


// asm/libultra/libc/llcvt.s ===================================================

// .text
__d_to_ll         = 0x8008F680; // type:func
__f_to_ll         = 0x8008F69C; // type:func
__d_to_ull        = 0x8008F6B8; // type:func
__f_to_ull        = 0x8008F758; // type:func
__ll_to_d         = 0x8008F7F4; // type:func
__ll_to_f         = 0x8008F80C; // type:func
__ull_to_d        = 0x8008F824; // type:func
__ull_to_f        = 0x8008F858; // type:func

// .rodata
llcvt_rodata_0000 = 0x800A7130;
llcvt_rodata_0008 = 0x800A7138;

// End of asm/libultra/libc/llcvt.s ============================================


// asm/libultra/os/startthread.s ===============================================

// .text
osStartThread = 0x8008F890; // type:func

// End of asm/libultra/os/startthread.s ========================================


// asm/libultra/io/visetyscale.s ===============================================

// .text
osViSetYScale = 0x8008F9E0; // type:func

// End of asm/libultra/io/visetyscale.s ========================================


// asm/libultra/audio/synallocfx.s =============================================

// .text
alSynAllocFx = 0x8008FA40; // type:func

// End of asm/libultra/audio/synallocfx.s ======================================


// asm/libultra/audio/synstopvoice.s ===========================================

// .text
alSynStopVoice = 0x8008FAE0; // type:func

// End of asm/libultra/audio/synstopvoice.s ====================================


// asm/libultra/audio/syndelete.s ==============================================

// .text
alSynDelete = 0x8008FB60; // type:func

// End of asm/libultra/audio/syndelete.s =======================================


// asm/libultra/io/aisetnextbuf.s ==============================================

// .text
osAiSetNextBuffer = 0x8008FB70; // type:func

// .data
hdwrBugFlag       = 0x800A2710;

// End of asm/libultra/io/aisetnextbuf.s =======================================


// asm/libultra/io/ai.s ========================================================

// .text
__osAiDeviceBusy = 0x8008FC20; // type:func

// End of asm/libultra/io/ai.s =================================================


// asm/libultra/io/vigetcurrframebuf.s =========================================

// .text
osViGetCurrentFramebuffer = 0x8008FC50; // type:func

// End of asm/libultra/io/vigetcurrframebuf.s ==================================


// asm/libultra/io/spsetpc.s ===================================================

// .text
__osSpSetPc = 0x8008FC90; // type:func

// End of asm/libultra/io/spsetpc.s ============================================


// src/common/interactables.c ==================================================

// .text
Interactable_Entrypoint          = 0x80125230; // type:func
Interactable_Init                = 0x801252A0; // type:func
Interactable_Main                = 0x80125764; // type:func
Interactable_InitCheck           = 0x80125B60; // type:func
Interactable_SelectTextboxOption = 0x80125D84; // type:func
Interactable_StopCheck           = 0x80126004; // type:func
Interactable_Destroy             = 0x801261DC; // type:func
Interactable_stopInteraction     = 0x80126354; // type:func

// .data
interactable_funcs               = 0x8016B560; // size:0x18

// End of src/common/interactables.c ===========================================


// src/common/cutscene_manager.c ===============================================

// .text
cutsceneMgr                                = 0x8034238C;
ptr_cutsceneMgr                            = 0x800D5F00;
cutsceneMgr_main                           = 0x80126FB0; // type:func
cutsceneMgr_stopCutscene                   = 0x80127348; // type:func
cutsceneMgr_loop                           = 0x80127274; // type:func
cutsceneMgr_setCameraClippingAndScissoring = 0x801271DC; // type:func
cutsceneMgr_createCutscene                 = 0x80127054; // type:func
cutsceneMgr_entrypoint                     = 0x80126F40; // type:func

// .data
cutsceneMgr_functions                      = 0x8016B580;

// End of src/common/cutscene_manager.c ========================================


// src/common/page.c ===========================================================

// .text
page_entrypoint         = 0x8014f4b0; // type:func segment:common
page_isWorkCreated      = 0x8014f520; // type:func segment:common
page_init               = 0x8014f558; // type:func segment:common
page_loop               = 0x8014f748; // type:func segment:common
page_destroy            = 0x8014f830; // type:func segment:common

// .data
page_1_hierarchy        = 0x801815c0; // segment:common size:0x4C
page_2_hierarchy        = 0x8018160c; // segment:common size:0x4C
page_3_hierarchy        = 0x80181658; // segment:common size:0x4C
page_flip_anim_rot_data = 0x801816A4; // segment:common size:0xFC
page_functions          = 0x801817A0; // segment:common size:0x10

// End of src/common/page.c ====================================================


// src/common/page_work.c ======================================================

// .text
pageWork_create = 0x8014f860; // type:func segment:common

// .rodata
D_8018BDF0      = 0x8018bdf0; // type:asciz segment:common size:0x0A

// End of src/common/page_work.c ===============================================


// src/common/skybox_common_actors.c ===========================================

// .text
obj0172_entrypoint        = 0x8015BF00; // type:func segment:common
obj0172_init              = 0x8015BF24; // type:func segment:common
obj0172_loop              = 0x8015BFD0; // type:func segment:common

commonMoon_entrypoint     = 0x8015C03C; // type:func segment:common
commonMoon_init           = 0x8015C060; // type:func segment:common
commonMoon_main           = 0x8015C178; // type:func segment:common
commonMoon_main_invisible = 0x8015C238; // type:func segment:common
commonMoon_main_appear    = 0x8015C288; // type:func segment:common
commonMoon_main_visible   = 0x8015C2D8; // type:func segment:common
commonMoon_main_disappear = 0x8015C320; // type:func segment:common

obj8015C368_entrypoint    = 0x8015C368; // type:func segment:common
obj8015C368_init          = 0x8015C38C; // type:func segment:common
obj8015C368_loop          = 0x8015C450; // type:func segment:common

// .data
obj0172_dlists            = 0x80187400; // segment:common size:0x18
commonMoon_dlists         = 0x80187418; // segment:common size:0x18
obj8015C368_dlists        = 0x80187430; // segment:common size:0x18

obj0172_functions         = 0x80187448; // segment:common size:0x08
commonMoon_functions      = 0x80187450; // segment:common size:0x08
commonMoon_main_functions = 0x80187458; // segment:common size:0x10
obj8015C368_functions     = 0x80187468; // segment:common size:0x08

// .rodata
D_8018C650                = 0x8018C650; // type:f32 segment:common

// End of src/common/skybox_common_actors.c ====================================

multPointMatrix = 0x800029e8;
vec3f_getDistanceBetweenTwoVectors = 0x8000400c;
NisitenmaIchigo_isFileLoaded = 0x80004180;
NisitenmaIchigo_storeLoadedFile = 0x800041a4;
NisitenmaIchigo_removeLoadedFile = 0x800041cc;
atan2s = 0x80004220;
atan2f = 0x80004394;
fig_isValid = 0x800043e0;
fig_destroySelfAndChildren_1 = 0x80004408;
figure_destroySelfAndChildren_2 = 0x800045b8;
clearAllFigs = 0x80004770;
figure_hideSelfAndChildren = 0x80004838;
figure_showModelAndChildren = 0x8000496c;
fig_allocate = 0x80004b28;
Camera_SetParams = 0x80004bb4;
Camera_Create = 0x80004c04;
Figure_SetSibling = 0x80004ca0;
Model_createAndSetChild = 0x80004e68;
Model_createNextNode = 0x80004ef4;
modelInfo_createHierarchyNode = 0x80004fac;
Model_buildHierarchy = 0x800051c8;
animation_animateRotationFrame = 0x800088ec;
Model_setPosVec3s = 0x80009330;
Model_copyPositionalData = 0x80158c98;
animation_animateTranslationFrame = 0x800095e0;
animationInfo_create = 0x8000b454;
animationInfo_setParams = 0x8000b5b8;
animationInfo_animateFrame = 0x8000B774;
animationMgr_create = 0x8000b8d8;
animationMgr_setAnimParams = 0x8000b9b8;
animationMgr_setAnimParamsWithoutSmoothingPosTransition = 0x8000ba4c;
animationMgr_checkCurAnimFlagsAreSet = 0x8000bb10;
animationMgr_checkDifferentAnimRotationDataPtrs = 0x8000bbdc;
animationMgr_setAnimParamsAndTranslationData = 0x8000be10;
animationMgr_setAnimParamsAndTranslationDataWithoutSmoothingPosTransition = 0x8000be4c;
animationMgr_animateFrame = 0x8000c0b8;
object_loadAssociatedFiles = 0x8000ed60;
mapOverlay = 0x8000ef7c;
unmapOverlay = 0x8000f158;
NisitenmaIchigo_checkAndStoreLoadedFile = 0x8000f280;
DMAMgr_8000f5d8 = 0x8000f5d8;
DMAMgr_loadFile = 0x8000f670;
DMAMgr_loadNisitenmaIchigoFile = 0x8000f83c;
DMAChunkMgr_loadChunkFromROM = 0x8000fab8;
DMAChunkMgr_advanceToNextByte = 0x8000fb40;
isValidBGM = 0x800129a8;
setBGM = 0x80014a28;
resetCurrentBGMAndStopBGM = 0x80014a60;
setPreviousBGMAndStopBGM = 0x80014a98;
setNewBGM = 0x80014ad0;
isBGMNotNothing = 0x80014b30;
isBGMPlaying = 0x80014b40;
wasMusicPlaying = 0x80014bac;
pauseBGM = 0x80014bbc;
decreaseBGMVolume = 0x80014c48;
increaseBGMSpeed = 0x80014cd8;
getCurrentBGM = 0x80014d34;
resetCurrentBGM = 0x80014d50;
setPreviousBGM = 0x80014db4;
game_loop = 0x80015378;
calcSoftReset = 0x800154ac;
loadCompressedFile = 0x80015910;
scheduler_create = 0x80015aa0;
scheduler_getAudioRequestMQ = 0x80015d2c;
scheduler_getGraphicsRequestMQ = 0x80015d34;
scheduler_getFramebufferIndex = 0x80015d3c;
scheduler_addClient = 0x80015e00;
scheduler_removeClient = 0x80015e50;
scheduler_eventBroadcast = 0x80015ed8;
scheduler_getFramebufferSwapped = 0x80016388;
scheduler_swapFramebuffer = 0x80016390;
createGraphicTasks = 0x80016440;
end_master_display_list = 0x800165a8;
controller_Init = 0x80016a60;
controller_readData = 0x80016b6c;
controller_clearButtonsPressed = 0x80016c88;
romCopyAndDecompress = 0x80016f54;
ROM_0x1800_ChunkLoad__Advance = 0x8001746c;
loadROM_0x1800_Chunk_ToRAM = 0x800174e4;
setNextFileToLoad = 0x80017570;
loadFilesFromFileLoadArray = 0x800175ec;
osSyncPrintf = 0x800192E8;
crashScreen_printThreadData = 0x80019560;
crashScreen_printExceptionInfo = 0x80019968;


// src/controller_pak.c ========================================================

// .text
contpak_get_inserted_status = 0x8001A380; // type:func
contpak_init_all            = 0x8001A46C; // type:func
contpak_init                = 0x8001A538; // type:func
contpak_alloc_file          = 0x8001A5CC; // type:func
contpak_delete_file         = 0x8001A664; // type:func
contpak_find_file           = 0x8001A6E4; // type:func
contpak_get_file_state      = 0x8001A770; // type:func
contpak_get_num_files       = 0x8001A7D4; // type:func
contpak_get_free_blks       = 0x8001A838; // type:func
contpak_is_plug             = 0x8001A89C; // type:func
contpak_read_file           = 0x8001A8C4; // type:func
contpak_write_file          = 0x8001A948; // type:func
contpak_check_rumble_pak    = 0x8001A9CC; // type:func
check_inserted_err          = 0x8001AA58; // type:func
contpak_8001AAA8            = 0x8001AAA8; // type:func
contpak_8001AB18            = 0x8001AB18; // type:func
contpak_repair_id           = 0x8001AB88; // type:func

// .bss
pfs                         = 0x800D7150; // size:0x19E
D_800D72F0_A85C0            = 0x800D72F0; // size:0x19E
contpak_uninserted          = 0x800D7490;

// End of src/controller_pak.c =================================================

contPak_writeSaveFile = 0x8001acf8;
saveData_BackupAndWriteNewSave = 0x8001ad80;
saveFile_readSaveFile = 0x8001ae7c;
copySave_cPakToGame = 0x8001af7c;
saveFile_verifyChecksums = 0x8001b040;
saveFile_findFile = 0x8001b150;
saveFile_calcFirstChecksum = 0x8001b1f4;
saveFile_calcSecondChecksum = 0x8001b238;
saveFile_calcAllChecksums = 0x8001b27c;
saveData_copyDataBetweenTypes = 0x8001b2bc;
readFileSelectionSaveSlotData = 0x8001b424;
readSaveFileNumber = 0x8001b5b4;
contPak_handleErrors = 0x8001b84c;
strcpy = 0x8001baf0;
writeNewPakSaveNote = 0x8001bb28;
updatePlayerControls = 0x800219b8;
modelInfo_copyAngle = 0x80021ea0;
modelInfo_copySize = 0x80021ee4;
Actor_updateAnimParamsWhenDiffRotationPtrs = 0x800221c4;
Player_updateAnimParams = 0x80022ac8;
Player_animateFrame = 0x80022c90;
Player_calcPhysics = 0x80023d88;
getFootstepSFXArraySoundID = 0x80025108;
play_footstep_sfx = 0x800251bc;
Player_8002639c = 0x8002639c;
Player_setFallReaction = 0x80026e14;
PlayerMgr_updateJumpSpeedAndAngle = 0x8002b3d4;
getAngleBetweenPlayerAndInteractable = 0x80037690;
random_range = 0x80037980;
getCurrentCharacter = 0x8003ca24;
vec3f_magnitude_2 = 0x8003d37c;
vec3f_substractFloats = 0x8003d3fc;
vec3f_copyFloats = 0x8003d43c;
vec3f_clear = 0x8003d46c;
atari_work_table_init = 0x80040570;
atariDataWork_init = 0x80040734;
atariOnlyWork_init = 0x8004083c;
atariWork_markForDeletion = 0x800409dc;
atariBaseWork_destroy = 0x800409ec;
magicBall_hitWallCheck = 0x800586cc;
magicBall_setColor = 0x8005a38c;
createEffectObject = 0x8005afcc;
effect_createModel = 0x8005b388;
effect_editVisualInfoFlags = 0x8005b990;
effect_getColor = 0x8005b6b8;
effect_setColor = 0x8005b6fc;
effect_loop = 0x8005cdf4;
effect_setLoopFunction = 0x8005ba64;
effectMgr_increaseNumerOfEffectsCreated = 0x8005cf9c;
effectMgr_checkFreeEffectSlots = 0x8005d1f4;
magicBall_calcNextPos = 0x8006548c;
func_80066400 = 0x80066400;
cameraMgr_disableViewMode = 0x800665f0;
cameraMgr_calcCameraMode = 0x8006662c;
cameraMgr_loop_gameplay = 0x80066ce0;
cameraMgr_loop_cutscene = 0x80066e94;
cameraMgr_calcCameraState = 0x80066f10;
cameraMgr_calcCameraModeText = 0x80067858;
cameraMgr_updateCameraModeTextType = 0x80067894;
cameraMgr_calcCameraCollision = 0x80067b08;
cameraMgr_enterFirstPerson = 0x800684f0;
cameraMgr_leaveFirstPerson = 0x80068520;
cameraMgr_firstPerson_main = 0x800685e8;
cameraMgr_firstPerson_moveCamera = 0x80068a30;
cameraMgr_enterDoor = 0x80068c98;
unsetInFirstPersonMode = 0x80068d40;
cameraMgr_calcNewLockAngleOffset = 0x80069010;
cameraMgr_setReadingTextState = 0x800698a0;
cameraMgr_setLockCameraAtPointState = 0x800698c0;
cameraMgr_checkFirstPersonOrEnteringDoor = 0x800698e0;
cameraMgr_checkIfEnterOrLeaveFirstPerson = 0x80069908;
cameraMgr_copyCameraPos = 0x80069960;
cameraMgr_setCameraPosition = 0x80069988;
cameraMgr_changeCameraMode = 0x80069be4;
cameraMgr_checkIfEnterOrLeaveDoor = 0x80069c74;
cameraMgr_setPlayerCameraPosAndDir = 0x80069ccc;
cameraMgr_checkIfLockCameraWithR = 0x80069d34;
checkIfChangeCameraButtonIsHeld = 0x8006a7b8;
modelInfo_displayModel = 0x8006a7fc;
PlayerMgr_getVisualData = 0x8006a8fc;
hidePlayerModel = 0x8006aae0;
isPlayerRunning = 0x8006ac88;
getPlayerCharacter = 0x8006acf0;
cameraMgr_updateFirstPersonCameraHeight = 0x8006ad78;
actorDoor_getAngleYaw = 0x8006afac;
cameraModeText_update = 0x8006b4b0;
cameraModeText_calcTextOpening = 0x8006b518;
cameraModeText_calcTextClosing = 0x8006b580;
cameraModeText_calcTextStill = 0x8006b5ec;
cameraModeText_setTextDlist = 0x8006b6c0;
cameraModeText_displayText = 0x8006b778;
cameraModeText_isTextOpened = 0x8006b7dc;
cameraModeText_isTextClosed = 0x8006b82c;
playerCameraController_disableViewMode = 0x8006b9e8;
playerCameraController_copyCameraLookAtDir = 0x8006ba3c;
amCreateAudioMgr = 0x80078f70;
__amHandleFrameMsg = 0x800793e4;
__amHandleDoneMsg = 0x8007958c;
__clearAudioDMA = 0x80079780;
audioMgr_init = 0x800798a0;
audioMgr_addClientPlayer = 0x80079a90;
prepareSoundForPlay = 0x80079e34;
osSendMesg = 0x8007f2e0;
osPfsFreeBlocks = 0x8007f430;
guPerspectiveF = 0x8007f5d0;
osRecvMesg = 0x8007f860;
osSetIntMask = 0x8007f9a0;
alUnlink = 0x8007fa40;
alLink = 0x8007fa70;
alClose = 0x8007fa94;
alInit = 0x8007facc;
sins = 0x8007feb0;
alSynSetVol = 0x8007ff20;
_VirtualToPhysicalTask = 0x8007ffc0;
osSpTaskLoad = 0x800800dc;
osSpTaskStartGo = 0x8008026c;
osMapTLB = 0x800802b0;
__osEnqueueAndYield = 0x8008098c;
__osEnqueueThread = 0x80080a8c;
__osPopThread = 0x80080ad4;
__osDispatchThread = 0x80080ae4;
__osDequeueThread = 0x80080c70;
osPiReadIo = 0x80080dc0;
__osPiCreateAccessQueue = 0x80080e00;
__osPiGetAccess = 0x80080e50;
__osPiRelAccess = 0x80080e94;
osContInit = 0x80080ec0;
__osContGetInitData = 0x80081030;
__osPackRequestData = 0x80081100;
__osSiCreateAccessQueue = 0x80081200;
__osSiGetAccess = 0x80081250;
__osSiRelAccess = 0x80081294;
osCreateThread = 0x800812c0;
osContStartReadData = 0x80081410;
osContGetReadData = 0x80081494;
__osPackReadData = 0x80081520;
bnkf_text_0010 = 0x80081810;
alBnkfNew = 0x80081904;
_allocatePVoice = 0x80081a50;
alSynAllocVoice = 0x80081b38;
osVirtualToPhysical = 0x80081c80;
osWritebackDCache = 0x80081d00;
checkCutsceneTimeRangeTrigger = 0x80127e84;
cutscene_setCameraClippingAndScissoring = 0x801287f0;
textbox_create = 0x8012cb88;
textbox_setPos = 0x8012ccfc;
textbox_setDimensions = 0x8012cd14;
textbox_setMessagePtr = 0x8012cd38;
textbox_enableLens = 0x8012cda4;
textbox_setScaleParameters = 0x8012cdc8;
text_getMessageFromPool = 0x8012ce7c;
text_8012cf7c = 0x8012cf7c;
text_8012d020 = 0x8012d020;
text_8012d074 = 0x8012d074;
mfds_set_menu_string = 0x8012d100;
text_convertSignedIntegerToText = 0x8012d6f4;
mfds_color_animation_init = 0x80130854;
lens_updateFlashAlpha = 0x80133a94;
lens_updateBackgroundSizeAndPos = 0x80133d38;
lens_openLensX = 0x80134038;
lens_openLensY = 0x801343d0;
lens_closeLensX = 0x8013475c;
lens_closeLensY = 0x80134af8;
HUD_updateClockMarkersAngle = 0x80138c54;
HUD_updateClockDayNightGraphic = 0x80138d20;
HUD_updateGameplayHUDPos = 0x80138fac;
renonShop_createWork = 0x8013ac0c;
renonShop_getItemPriceFromShopData = 0x8013ad2c;
renonShop_getItemDescriptionFromShopData = 0x8013ad8c;
allocStructInObjectEntryList = 0x8013b3b8;
allocGraphicContainerInObjectEntryList = 0x8013B454;
isMenuDataHeapActive = 0x8013b520;
gameplayCommonTextbox_getIfClosed = 0x8013b550;
gameplayCommonTextbox_close = 0x8013b5a8;
gameplayCommonTextbox_prepare = 0x8013B608;
gameplayCommonTextbox_addItemAndPrepareName = 0x8013b738;
gameplayCommonTextbox_getMapMessage = 0x8013b918;
gameplayCommonTextbox_getMessageFromPool = 0x8013bae4;
gameplayCommonTextbox_lensAreOpened = 0x8013bc00;
gameplayCommonTextbox_lensAreClosed = 0x8013bc60;
gameplayCommonTextbox_getObject = 0x8013bcb8;
gameplayCommonTextbox_getObjectFromList = 0x8013bd1c;
itemModelSettings_getEntryFromList = 0x8013bd50;
getFirstItemModelSettingsEntryInRenonShop = 0x8013bf8c;
item_addAmountToInventory = 0x8013bfec;
item_removeAmountFromInventory = 0x8013c30c;
item_getAmountUntilMaxCapacity = 0x8013c3a0;
createItemModel = 0x8013c600;
vec3f_magnitudeComponents = 0x8013c6e0;
vec3f_magnitudeEndpoints = 0x8013c728;
fileSelect_createGameNoteErrorHandler = 0x8013cf30;
createSlashGfx = 0x8014091c;
fileSelectController_updateBGColor = 0x801432d4;
fileSelect_setSlotText = 0x80146d10;
fileSelect_showSlotStrings = 0x80147164;
fileSelect_setMoneyString = 0x80147300;
map_initPositionSettings = 0x801529cc;
Map_SetCameraParams = 0x80152b60;
updateMoonVisibility = 0x80152bf4;
createMapPiece = 0x80152c2c;
isPlayerInsideMapPiece = 0x80152fcc;
mapCollisionPtrHolder_getCollisonDataFromMapPieceArray = 0x80153214;
playerIsInsideMapBoundingBox = 0x80153448;
getCurrentlySteppingMapPieceIndex = 0x80153574;
getCurrentlyLoadedMapPieceInfo = 0x801537a0;
modelInfo_setFogColorFromMap = 0x801537c4;
NisitenmaIchigoFiles_segmentToVirtual = 0x801537d4;
clearCollisionTrianglesArrayBlock = 0x80153834;
map_getAlignedSize8 = 0x80153854;
modulo = 0x80153870;
modulo_onlyPositiveDividend = 0x801538b4;
colorMultiply = 0x80154970;
getTimeOfDayWhenMapLightingChanges = 0x80154b94;
map_clearCollisionAndActorInfo = 0x80154c00;
map_createAllMapActorModels = 0x80154c90;
initMapPieceCollision = 0x80154ed0;
generateMapPieceCollision = 0x80154f90;
getMapActorModelEntryFromArray = 0x80155d48;
findMapActorModel = 0x80155d90;
getMapActorModelArrayIndex = 0x80155e00;
clearMapPieceCollision = 0x80155e6c;
checkMapPieceCollisionExists = 0x80155f1c;
createMapActorModel = 0x80155f88;
stopMapAmbienceSounds = 0x80156040;
checkIfOutsideEntityIsInsideMainEntityRadius = 0x8015870c;
rand = 0x80158874;
rand_f32 = 0x801588a4;
actor_playerOutsideActorSpawnRadius = 0x801588ec;
Actor_findFirstActorWithVariable1 = 0x801589c0;
modelInfo_copyPosToVec3f = 0x80158c7c;
isDaytime = 0x801591e4;
isNightTime = 0x80159214;
Model_setMapActorModelNoCollision = 0x80159240;
roomMgr_createActors = 0x8015ddf8;
roomMgr_initDoors = 0x8015e098;
actorDoor_checkSpawn = 0x8015f604;
actorDoor_playSound = 0x8015fedc;
checkIfDistanceBetweenEntitiesIsUnderThreshold = 0x8015ff8c;
actorCandle_dropItem = 0x80165c78;
actorCandle_spawnBreakEffect = 0x80165dd8;
droppedItemInfo_calcdropItem = 0x80166018;
shouldDisableCandle = 0x801661ec;
playerIsOutsideActorSpawnRadius = 0x801661f8;
actorCreator_createActorObject = 0x80168004;
Actor_CheckMatchingDifficulty = 0x80168150;
Actor_SetPos = 0x801681c0;
Actor_SetPosAndAngle = 0x8016823c;
actor_checkProximityDespawn = 0x801683d8;
generator_createActorAndSettings = 0x8016a1ec;
generator_createActor = 0x8016a2dc;
generator_allocActorConfig = 0x8016a660;
getMapModelPosMultiplier = 0x8016a7bc;
generator_checkInTimeRange = 0x8016a7ec;
Carrie_stopAirborne = 0x803d36b0;
PlayerMgr_803d3df0 = 0x803d3df0;
PlayerMgr_803d41fc = 0x803d41fc;
PlayerMgr_testBreak = 0x803d6578;
GameStateMgr_entrypoint = 0x8000053c;
gamestate_init = 0x800005dc; // type:func
code_execution_max_delay = 0x80387AD0;
end_frame = 0x8000072c;
objectList_findObjectByIDAndType = 0x80001bc0;
getRandomFromGuRandom = 0x80004118;
animationMgr_updateAnimParams = 0x8000be88;
NisitenmaIchigo_checkAndRemoveLoadedFile = 0x8000f2c4;
object_0003_entrypoint = 0x8000f308;
DMAMgr_entrypoint = 0x8000fb98;
DMAMgr_createStaticInstance = 0x8000fc08;
DMAMgr_8000fcd0 = 0x8000fcd0;
DMAMgr_8000fd8c = 0x8000fd8c;
DMAMgr_8000fe3c = 0x8000fe3c;
DMAMgr_8000feac = 0x8000feac;
DMAMgr_anotherDecompressFunction = 0x800100a4;
DMAMgr_80010344 = 0x80010344;
DMAMgr_800103e0 = 0x800103e0;
DMAMgr_decompressChunkBuffer = 0x80010510;
play_sound_in_position = 0x80013a48;
play_sound = 0x80013eac;
main = 0x80014fa0;
Idle_ThreadEntry = 0x80014ffc;
Main_ThreadEntry = 0x80015090;
scheduler_eventHandler = 0x80015d44;
scheduler_executeAudio = 0x80015f28;
scheduler_executeGraphics = 0x800160b0;
scheduler_80016288 = 0x80016288;
konamiLogoCreator_entrypoint = 0x800179e4;
gameOverCreator_entrypoint = 0x80017bdc;
gameplayMgr_entrypoint = 0x80017ca8;
gameplayMgr_check3DCameraIsInitialized = 0x80017d18;
gameplayMgr_destroy = 0x80017d94;
gameplayMgr_init = 0x80017ea8;
gameplayMgr_main_entrypoint = 0x80018108;
gameplayMgr_main_loadAssetsFile = 0x80018178;
gameplayMgr_main_checkAssetsFileIsLoaded = 0x80018240;
gameplayMgr_main_startGameplay = 0x800182b8;
gameplayMgr_main_loop = 0x800183c0;
gameplayMgr_main_restartGameplay = 0x800185ec;
gameplayMgr_main_openMenu = 0x80018628;
gameplayMgr_main_quitMenu = 0x80018740;
gameplayMgr_main_goBackToMainLoopAfterMenu = 0x800187f8;
gameplayMgr_menu_entrypoint = 0x80018838;
gamePlayMgr_menu_executeMenu = 0x80018918;
gamePlayMgr_menu_loadAssetsFileBack = 0x80018970;
gamePlayMgr_menu_returnToMainLoop = 0x800189c4;
PlayerController_entrypoint = 0x80018a30;
mapSetup_entrypoint = 0x80018b18;
mapSetup_createStructs = 0x80018c4c;
isPrintfInit = 0x80019260;
unusedPrintf = 0x800192a8;
is_proutSyncPrintf = 0x80019398;
crashScreen_ThreadEntry = 0x80019a44;
crashScreen_Init = 0x80019b48;
contPak_initFirstPak = 0x8001abd0;
contPak_initFirstPak_2 = 0x8001abf8;
createNewPakSaveNote = 0x8001ac20;
contPak_checkError = 0x8001b19c;
initSave_BeginningOfStageState = 0x8001b6a8;
restoreBeginningOfStageSave = 0x8001b6d8;
saveFile_writeFile = 0x8001b748;
Player_createAnimMgr = 0x80022180;
Carrie_action_waitUntilAnimationEnds = 0x80023370;
Player_destroy = 0x800233dc;
enemyTargetGfx_entrypoint = 0x80025380;
enemyTargetGfx_init = 0x800253f0;
enemyTargetGfx_onTarget = 0x8002559c;
func_800260F8_26CF8 = 0x800260F8;
enemyTargetGfx_hidden = 0x80026100;
Carrie_damage_entrypoint = 0x800261a0;
Carrie_damage_init = 0x80026ffc;
PlayerMgr_calcDamage = 0x800278bc;
Carrie_damage_grab_init = 0x80028a44;
Carrie_damage_grab_letGo = 0x80028ecc;
Carrie_damage_grab_finish = 0x80028f78;
Carrie_damage_grabAndLaunch_initParams = 0x80028ff4;
Carrie_damage_grabAndLaunch_stopPlayer = 0x80029120;
Carrie_damage_grabAndLaunch_initAnimation = 0x80029228;
Carrie_dead_entrypoint = 0x8002941c;
Carrie_dead_init = 0x80029524;
Carrie_dead_beginFade = 0x80029b5c;
Carrie_dead_fading = 0x8002a34c;
Carrie_dead_goToGameOver = 0x8002a3ac;
Carrie_dead_squashed_init = 0x8002a3e0;
Carrie_dead_squashed_sink = 0x8002a534;
Carrie_dead_squashed_fading = 0x8002a664;
Carrie_frozenGrab_entrypoint = 0x8002a860;
PlayerMgr_8002ab44 = 0x8002ab44;
PlayerMgr_8002ae30 = 0x8002ae30;
Carrie_jump_entrypoint = 0x8002b060;
PlayerMgr_calcJumpUp = 0x8002be5c;
PlayerMgr_calcJumpDown = 0x8002be84;
Player_ledgeMovement_entrypoint = 0x8002c9d0;
PlayerMgr_calcClimbUp = 0x8002ea3c;
knife_entrypoint = 0x8002f178;
knife_init = 0x8002f1e8;
knife_destroy = 0x8002fc58;
cross_entrypoint = 0x800306b4;
cross_init = 0x80030724;
cross_loop = 0x80030af8;
cross_createDestroyedEffect = 0x800315ac;
cross_crashIntoWall = 0x80031708;
cross_destroy = 0x80031860;
nitroExplosion_entrypoint = 0x80031ff4;
nitroExplosion_init = 0x8003206c;
nitroExplosion_stepOne = 0x80032128;
nitroExplosion_stepTwo = 0x80032380;
nitroExplosion_destroy = 0x800327ac;
getAngleBetweenPlayerAndActor = 0x800373c0;
enemy_DropItem = 0x800384c0;
actor_checkProximityHide = 0x8003b784;
Actor_rotateTowardsPlayer = 0x8003cd88;
Actor_getLengthBetweenPosAndVec3f = 0x8003ce44;
getAngleBetweenEntities = 0x8003d198;
getVelocityFromAngleAndSpeed = 0x8003d260;
vec3f_getLengthBetweenVec3f_2 = 0x8003d2ec;
vec3f_getLengthBetweenVec3f = 0x8003d320;
vec3f_rotateCounterClockwiseXZ = 0x8003d484;
EnemyList_init = 0x8003e800; // type:func
EnemyList_addOrModifyEntry = 0x8003e828; // type:func
EnemyList_removeEntry = 0x8003e8e0; // type:func
func_8003E98C_3F58C = 0x8003e98c; // type:func
EnemyList_printEnemyState = 0x8003e994; // type:func
func_8003EA7C_3F67C = 0x8003ea7c; // type:func
func_8003EA84_3F684 = 0x8003ea84; // type:func
EnemyList_clearEntry = 0x8003ea8c; // type:func
EnemyList_getNumberOfActiveEnemies = 0x8003eaac; // type:func
EnemyList_isAnyEnemyWithinRange = 0x8003eaf4; // type:func
EnemyList_getTimeOfDay = 0x8003ec20; // type:func
EnemyList_enemyStates = 0x800985D0;     // size:0x14
Enemy_timeOfDayList = 0x800985E4;     // size:0x10
enemy_list = 0x800D7FC0;     // size:0x104
D_800D80C4 = 0x800D80C4;     // type:s32
target_report_entrypoint = 0x8003ec70;
atariDataWork_create = 0x800406c8;
atariOnlyWork_create = 0x800407c8;
atariBaseWork_attachCollider = 0x800408e8;
atari_work_update = 0x80040aa0;
shadow_entrypoint = 0x80054eb0;
shadow_init = 0x80054f20;
shadow_loop = 0x80055028;
shadow_destroy = 0x80055064;
cerberusFireObject_exit = 0x8005568c;
pickableItemFlash_entrypoint = 0x80056450;
pickableItemFlash_destroy = 0x8005664c;
magicBall_entrypoint = 0x800568c0;
effect91_init = 0x800569b8;
effect91_nop_wait = 0x8005704c;
effect91_step1_main = 0x80057158;
effect91_step2_main = 0x80057580;
effect91_wait = 0x80057680;
effect91_shot_init = 0x800576d0;
effect91_shot_main = 0x80057c20;
hit_top_check = 0x800580e0;
magicBall_setBallColor = 0x8005a4c0;
magicBall_setOuterRingsColor = 0x8005a55c;
effect91_return_init = 0x8005a5ec;
createEffectObjectUnderEffectMgr = 0x8005afa0;
effect_init = 0x8005ba70;
effect_initParams = 0x8005b120;
effect_getModel = 0x8005b380;
effect_updateGraphicParams = 0x8005c168;
effect_destroy = 0x8005b40c;
effect_setPosition = 0x8005b4ac;
effect_setAngle = 0x8005b568;
effect_setScale = 0x8005b5fc;
effect_createPointLight = 0x8005be00;
effectAnimationInfo_create = 0x8000e010;
effectAnimationInfo_init = 0x8000e128;
func_8000E1B4 = 0x8000E1B4;
effectAnimationInfo_setAnimParams = 0x8000e044;
effectMgr_checkEffectSlotsAvailableLimit = 0x8005d1b8;
cameraMgr_entrypoint = 0x800667fc;
cameraMgr_createCameras = 0x800669a0;
cameraMgr_loop = 0x80066c1c;
cameraMgr_firstPerson_entrypoint = 0x800684d0;
createCameraModeText = 0x8006b6e4;
playerCameraController_setCameraLookAtDir = 0x8006ba64;
playerCameraController_entrypoint = 0x8006ba84;
playerCameraController_init = 0x8006baf4;
playerCameraController_calcNormalAndActionView = 0x8006bcfc;
playerCameraController_calcBattleView = 0x8006bdfc;
audioMgr_ThreadEntry = 0x80079278;
__amDMA = 0x800795cc;
prepareAudioTrackStates = 0x80079c00;
prepareMuteSoundToPlayAndSetStereoLocation = 0x80079dd4;
prepareSoundToPlayAndSetVolume = 0x80079e04;
guPerspective = 0x8007f800;
osDestroyThread = 0x80080cb0;


// src/common/interactables_helpers.c ==========================================

// .text
Player_getActorCurrentlyInteractingWith          = 0x80126370; // type:func
Player_getSpecialTextboxCurrentlyInteractingWith = 0x801267C4; // type:func
playerCanInteractWithInteractable                = 0x801268E4; // type:func
interactables_getInteractingType                 = 0x80126BE0; // type:func
interactables_enableTextbox                      = 0x80126CD4; // type:func
interactables_setInteractingFlag                 = 0x80126CE0; // type:func
getMapEventFlagID                                = 0x80126CEC; // type:func
spawnCastleWallGratingMechanismTextboxes         = 0x80126E04; // type:func
removeKeyWhenOpeningDoor                         = 0x80126EA0; // type:func

// .rodata
D_8018ab80                                       = 0x8018AB80; // type:jtbl size:0x74

// End of src/common/interactables_helpers.c ===================================


// src/common/interactables_tables.c ===========================================

// .data
castleWallGratingMechanism_textSpotsActorConfig_openMechanism   = 0x8016A870; // size:0x10
castleWallGratingMechanism_textSpotsActorConfig_mechanismOpened = 0x8016A880; // size:0x10
door_item_open_verify_list                                        = 0x8016A890; // size:0x68
castleWallGratingMechanism_textSpotsActorConfig                 = 0x8016A8F8; // size:0x0C
interactables_settings                                            = 0x8016A904; // size:0x9C4
item_model_settings_list                                          = 0x8016B2C8; // size:0x290

// End of src/common/interactables_tables.c ====================================


cutsceneTrigger_entrypoint = 0x801274f0;
cutsceneTrigger_checkCollision = 0x801276b4;
cutsceneTrigger_destroy = 0x80127e60;
createCutsceneObject = 0x80127f00;
cutscene_setActorStateIfMatchingVariable1 = 0x80128178;
initAtariWorkTableAndStopCutscene = 0x8012a380;
initNewGame = 0x8012a3b4;
player_status_init = 0x8012a4c0;
textboxObject_entrypoint = 0x8012af30;
ObjMfds_init = 0x8012afa0;
textbox_setItemPickableNameText = 0x8012d400;
lens_createDistortionEffect = 0x801325a0;
lens_destroy = 0x80133a24;
lens_create = 0x801364d0;
gameplayMenuMgr_entrypoint = 0x80136710;  // type:func
gameplayMenuMgr_initMainStructs = 0x80136780;  // type:func
gameplayMenuMgr_initHUDParams = 0x80136894;
gameplayMenuMgr_outsideMenuLoop = 0x8013692c;  // type:func
gameplayMenuMgr_initMenu = 0x80136a30;  // type:func
gameplayMenuMgr_insideMenuLoop = 0x80136c70;  // type:func
gameplayMenuMgr_exitMenu = 0x801372e4;  // type:func
moveSelectionCursor = 0x8013742c;  // type:func
gameplayMenuMgr_unusedString1 = 0x8018b2f0;
gameplayMenuMgr_unusedString2 = 0x8018b318;
gameplayMenuMgr_unusedString3 = 0x8018b364;
gameplayMenuMgr_unusedString4 = 0x8018b38c;
gameplayMenuMgr_unusedString5 = 0x8018b3a8;
gameplayMenuMgr_unusedString6 = 0x8018b3c8;
gameplayMenuMgr_unusedString7 = 0x8018b3e4;
gameplayMenuMgr_unusedString8 = 0x8018b404;
HUD_entrypoint = 0x80137500;
HUD_initParams = 0x80137570;
HUD_initGraphics = 0x80137638;
HUD_destroy = 0x801381dc;
HUD_updateBossBar = 0x801386e0;
HUD_updateClockDisplay = 0x80138b68;

// src/common/hud_params.c =====================================================

// .text
HUDParams_initBossBar              = 0x80139340; // type:func
HUDParams_removeBossCurrentLife    = 0x801393AC; // type:func
HUDParams_IncreaseDamage           = 0x801393D4; // type:func
HUDParams_resetPlayerLifeAndStatus = 0x80139424; // type:func
HUDParams_FillPlayerHealth         = 0x80139468; // type:func

// End of src/common/hud_params.c ==============================================

renonShop_entrypoint = 0x801394e0;
renonShop_createBriefcaseCutscene = 0x80139550;
renonShop_fadeInAfterBriefcaseCutscene = 0x80139594;
renonShop_loadAssetsFile = 0x80139618;
renonShop_init = 0x80139688;
renonShop_createScrollState = 0x801399cc;
renonShop_calcMainMenu = 0x80139b78;
renonShop_calcItemList = 0x80139f1c;
renonShop_calcBuyScreen = 0x8013a4f4;
renonShop_displayTextWhenLeavingBuyScreen = 0x8013aa18;
renonShop_destroy = 0x8013ab84;
menuButton_selectNextOption = 0x8013b00c;
allocStruct = 0x8013b2c0;
getNumberOfItemsInRenonShop = 0x8013c598;
createScrollState = 0x8013cc20;
miniScroll_create = 0x8013cdc0;
miniScroll_checkFlags = 0x8013cf20;
miniScroll_editFlags = 0x8013ceec;
miniScroll_getModel = 0x8013ced0;
miniScroll_setState = 0x8013ced8;
miniScroll_setScrollingParams = 0x8013cea0;
miniScroll_setPosition = 0x8013ce80;
miniScroll_setWidth = 0x8013ceb0;
distortion_entrypoint = 0x8013cfb0;
distortion_createStructs = 0x8013d020;
distortion_destroy = 0x8013ddb0;
menuWork_create = 0x80140a80;
keyconMenuWork_create = 0x80140b60;
PauseItemMenuWork_create = 0x80140c98;
characterSelect_create = 0x80140dc8;
dataSelectWork_create = 0x80140ea8;
Menu_checkIfWorkIsCreated = 0x80141010;
Menu_destroy = 0x8014242c;
fileSelectController_entrypoint = 0x80142450;
fileSelectController_initGraphicsAndCommonStructs = 0x80142598;
fileSelectController_loop = 0x801429ac;
fileSelectController_closeNecronomiconBook = 0x80142fc8;
fileSelectController_destroyNecronomiconBook = 0x80143128;
fileSelectController_exit = 0x80143184;
fileSelectController_destroy = 0x80143298;
fileSelect_entrypoint = 0x80143f70;
fileSelect_isDataSelectWorkCreated = 0x80143fe0;
fileSelect_init = 0x80144048;
fileSelect_openScroll = 0x80144fe0;
fileSelect_initSlotGraphics = 0x8014505c;
fileSelect_checkifSlot2GFXIsCreated = 0x801452bc;
fileSelect_createScroll = 0x80145c10;
scroll_entrypoint = 0x801483b0;
scroll_isScrollStateCreated = 0x80148420;
scroll_destroy = 0x8014ab3c;
mark_entrypoint = 0x8014f920;
mark_isMarkWorkCreated = 0x8014f990;
mark_init = 0x8014f9c8;
mark_loop = 0x8014fb04;
mark_destroy = 0x8014fc70;
markWork_create = 0x8014fca0;
glance_entrypoint = 0x8014fdf0;
actorMirrorCopy_entrypoint = 0x801519c8;
actorMirrorCopy_init = 0x80151a60;
mapMgr_entrypoint = 0x80152060;
mapMgr_loadMapFile = 0x801520d0;
mapMgr_setupMap = 0x801523bc;
mapMgr_loop = 0x80152664;
mapMgr_destroy = 0x80152f40;
allocOnMapDataHeap = 0x80153808;
getMapLightingPerTimeOfDay = 0x80154b48;
loadingZone_entrypoint = 0x801562c0;
loadingZone_init = 0x80156330;
loadingZone_playerIsInsideZone = 0x80156444;
loadingZone_setCutsceneSettings = 0x801565bc;
loadingZone_warpToMapFromLoadingZone = 0x80156a4c;
loadingZone_destroy = 0x80156ca4;
loadingZone_createEasyModeEnding_entrypoint = 0x80156cc8;
loadingZone_createEasyModeEnding_createEndingObject = 0x80156dd0;
loadingZone_createEasyModeEnding_end = 0x80156ed8;
loadingZone_createEasyModeEnding_destroy = 0x80156f30;
squashPoint_destroy = 0x801572c8;
skybox_entrypoint = 0x8015aa9c;
skybox_init = 0x8015ab10;
roomMgr_entrypoint = 0x8015cc10;
roomMgr_init = 0x8015cc80;
roomMgr_loop = 0x8015d148;
roomMgr_inactive = 0x8015d1d4;
roomMgr_active = 0x8015d278;
roomMgr_actorDestroy = 0x8015df94;
lever_entrypoint = 0x801600a0;
lever_init = 0x80160110;
lever_main_entrypoint = 0x80160304;
lever_raisedUp = 0x80160390;
lever_pull = 0x80160408;
lever_doNothing = 0x80160500;
riverWater_init = 0x801606a0;
riverWater_destroy = 0x80160a88;
miniElevator_entrypoint = 0x80161bd0;
miniElevator_init = 0x80161c40;
miniElevator_loop = 0x80161ec0;
actorPurpleFireCandle_801636b4 = 0x801636b4;
actorPurpleFireCandle_break = 0x8016391c;
actorPurpleFireCandle_801639dc = 0x801639dc;
actorPurpleFireCandle_801639fc = 0x801639fc;
actorPurpleFireCandle_destroy = 0x80163a58;
actorRoomOfClocksCandle_entrypoint = 0x80163ad8;
actorRoomOfClocksCandle_init = 0x80163b48;
actorRoomOfClocksCandle_loop = 0x80163f6c;
VillaChandelier_destroy = 0x80164f2c;
breakableRock_destroy = 0x80165ba8;
actorCandle_droppedItem_destroy = 0x80165d74;
actorCreator_entrypoint = 0x801677c0;
actorCreator_init = 0x80167830;
actorCreator_initialActorSpawn = 0x8016791c;
actorCreator_loop = 0x80167c3c;
actor_destroy = 0x80167fc4;
enemyGenerator_entrypoint = 0x801691e0;
enemyGenerator_init = 0x80169250;
enemyGenerator_loop = 0x80169320;
generator_destroyActor = 0x8016a388;
playBigDoorSound = 0x8018f56c;
Carrie_init_entrypoint = 0x803d17ec;
Carrie_createColliders = 0x803d185c;
Carrie_idle_entrypoint = 0x803d22b8;
Carrie_idle_init = 0x803d291c;
PlayerMgr_idle_stand = 0x803d2a38;
Carrie_idle_tired = 0x803d2c2c;
PlayerMgr_idle_doAltIdleAnimation = 0x803d2de0;
PlayerMgr_idle_crouch = 0x803d2f78;
PlayerMgr_idle_crouchWhileTired = 0x803d316c;
PlayerMgr_idle_doAltIdleAnimationWhileCrouching = 0x803d331c;
Carrie_falling_entrypoint = 0x803d344c;
Carrie_falling_init = 0x803d36ec;
Carrie_falling_checkIfShouldJump = 0x803d3774;
Carrie_falling_loop = 0x803d389c;
Carrie_attack_entrypoint = 0x803d3c1c;
Carrie_attack_init = 0x803d442c;
Carrie_attack_orb = 0x803d4978;
Carrie_attack_melee = 0x803d4b04;
Carrie_attack_subweapon = 0x803d4c54;
Carrie_action_entrypoint = 0x803d4d9c;
Carrie_action_chooseAction = 0x803d4f18;
Carrie_action_pickup_init = 0x803d50e4;
Carrie_action_pullLever_pull = 0x803d5438;
Carrie_action_openDoor_init = 0x803d5690;
Carrie_action_openDoor_walkToDoor = 0x803d59ac;
Carrie_action_openDoor_open = 0x803d5c04;
Carrie_action_openDoor_finish = 0x803d5d68;
Carrie_moving_entrypoint = 0x803d5f40;
PlayerMgr_803d6af4 = 0x803d6af4;
PlayerMgr_calcWalking = 0x803d6b74;
PlayerMgr_calcJogging = 0x803d6e14;
PlayerMgr_803d7024 = 0x803d7024;
PlayerMgr_calcRunning = 0x803d70ac;
PlayerMgr_calcBreakingAndTurnAround = 0x803d7560;
PlayerMgr_803d77c0 = 0x803d77c0;
PlayerMgr_calcThrowToGround = 0x803d7860;
PlayerMgr_calcCrouchWalking = 0x803d7c54;
Carrie_slide_entrypoint = 0x803d7ed4;
Carrie_slide_init = 0x803d80e4;
Carrie_slide_backwardSlide_loop = 0x803d81cc;
Carrie_slide_forwardSlide_loop = 0x803d83bc;
Carrie_enemyLock_entrypoint = 0x803d85b8;
Carrie_enemyLock_init = 0x803d8934;
Carrie_enemyLock_loop = 0x803d89a8;
Carrie_frozen_entrypoint = 0x803d8bf8;
PlayerMgr_frozen_init = 0x803d8d74;
PlayerMgr_803d9054 = 0x803d9054;
PlayerMgr_803d90c0 = 0x803d90c0;
PlayerMgr_803d9258 = 0x803d9258;
CarrieAttackMgr_entrypoint = 0x803d9850;
CarrieAttackMgr_createMagicBall = 0x803d9e94;
CarrieAttackMgr_selectAttackType = 0x803d9f6c;
CarrieAttackMgr_melee_entrypoint = 0x803da0b4;
CarrieAttackMgr_subweapon_entrypoint = 0x803daa2c;
CarrieAttackMgr_subweapon_useKnife = 0x803dad78;
CarrieAttackMgr_subweapon_useHolyWater = 0x803db2b4;
CarrieAttackMgr_subweapon_useCross = 0x803db610;
CarrieAttackMgr_subweapon_useAxe = 0x803dbb50;
atariBaseWork_init = 0x80040620;
PlayerMgr_80022b94 = 0x80022b94;
send_mesg = 0x800808a4;
setup_rsp = 0x800158e0;
setup_framebuffer = 0x800166f0;
setup_background_color = 0x800167bc;
setup_z_buffer = 0x80016968;
shadow_create = 0x80061280;
playerCameraController_updateCameraRotationSpeed = 0x8006bc50;
playerCameraController_8006bcf4 = 0x8006bcf4;
loadMusicSequenceFromROM = 0x8007b2f0;
text_findCharInString = 0x80132404;
HUD_updateHealthBar = 0x80138224;
HUD_updateSubweaponGraphic = 0x801386ac;
Player_updateStatus = 0x80023520;
osTvType = 0x80000300;
osRomBase = 0x80000308;
osResetType = 0x8000030c;
osAppNMIBuffer = 0x8000031c;
rspbootTextStart = 0x8008fcd0; // name_end:rspbootTextEnd
aspMainTextStart = 0x80091130; // name_end:aspMainTextEnd
alGlobals = 0x800a0760;
sins_data_0000 = 0x800a0770;
sins_data_07FE = 0x800a0f6e;
__osRunQueue = 0x800a0fa8;
__osActiveQueue = 0x800a0fac;
__osRunningThread = 0x800a0fb0;
__osPiAccessQueueEnabled = 0x800a0fc0;
__osContinitialized = 0x800a0fd0;
__osThreadTail = 0x800a1f40;
player_bss_003C = 0x800a2198;
osViModePalLan1 = 0x800a25b0;
osViModeNtscLan1 = 0x800a2600;
osViModeMpalLan1 = 0x800a2650;
perspective_rodata_0000 = 0x800a6ce0;
__osRcpImTable = 0x800a6cf0;
__libm_qnan_f = 0x800a70b0;
rotate_bss_0000 = 0x801226c0;
siacs_bss_0000 = 0x80122710;
__osPiAccessQueue = 0x80122718;
__osContLastCmd = 0x80122770;
__osMaxControllers = 0x80122771;
__osEepromTimerQ = 0x80122798;
__osEepromTimerMsg = 0x801227b0;
align_bss_0000 = 0x801227e0;
__osFinalrom = 0x801227f0;
ptr_PlayerData = 0x800d7af8;
Player_health = 0x80389c3e;
Player_gold = 0x80389c44;
Player_red_jewels = 0x80389c49;
fileSelectController_goToGameplay = 0x80143218;
cutscene_ID = 0x80389ef8;
mapObjectParent_entrypoint = 0x80018a28;
enemyParent_entrypoint = 0x80018e6c;
fade_settings = 0x80387ad6;
current_fade_time = 0x80387adc;
current_opened_menu = 0x80389eee;
PlayerController_createPlayerObject = 0x80018aa8;
map_fade_in_time = 0x80389eea;
map_fade_out_time = 0x80389ee8;
map_fade_in_color = 0x80389ee4;
cutscene_flags = 0x80389f00;
contPads = 0x800d5e20;
text_8012cee4 = 0x8012cee4;
mapSetup_setSaveGameMapAndEntrance = 0x80018b88;
mapSetup_setMapMusic = 0x80018d14;
mapSetup_loadMapObjectsOverlay = 0x80018bd0;
Carrie_entrypoint = 0x803d13e0;
textbox_setHeightAndWidth = 0x8012cd54;
SaveStruct_cPak = 0x800d74a0;
SaveStruct_gameplay = 0x80389be4;
controller_pak_note_table = 0x80096ad0;
osViModeNtsc = 0x800a10b0;
osViModePal = 0x800a1970;
controllerMsgQ = 0x800d5df0;
controller_status = 0x800d5e10;
sIdleThread = 0x800a8908;
gPIMesgBuf = 0x800abc80;
ptr_dmaIoMesgBuf = 0x800abfb8;
audioHeap = 0x800e22f8;
ALHeap = 0x800e22d8;
ALGlobals = 0x800dd750;
ALPlayer_client = 0x800e22c0;
sCrashScreenThread = 0x800d5f40;
crashScreen_mesgQueue = 0x800d70f0;
crashScreen_mesg = 0x800d7108;
crashScreen_args = 0x800a3070;
__osCurrFaultedThread = 0x800a0fb4;
crashScreen_CurrFaultedThread = 0x800d710c;
sMainThread = 0x800a9ab8;
gPIMesgQueue = 0x800abc68;
current_PowerUp_level = 0x80389cec;
magic_ball_max_size = 0x800a4a30;
map_actor_list_ptr = 0x80342b00;
__voiceHandler = 0x80079b2c;
__amDmaNew = 0x80079748;
sAudioThread = 0x800dd370;
Carrie_init = 0x803d1b80;
player_gravity_increase_decrease = 0x803ddc30;
PlayerMgr_frozen_loop = 0x803d8e14;
Carrie_init_waitUntilMapIsSetup = 0x803d2278;
Carrie_action_pullLever_waitForMessageToEnd = 0x803d538c;
Carrie_action_pickup_stop = 0x803d5f28;
PlayerMgr_calcBreaking = 0x803d73a4;
gOsSiMessageQueue = 0x801227c8;
osSiMesgBuff = 0x801227c0;
gOsSiAccessQueueCreated = 0x800a0fe0;
updateGameplayTime = 0x80018e74;
setup_frame = 0x80000694;
fog_distance_start = 0x80387ae0;
fog_distance_end = 0x80387ae2;
someROMLoadedFile_buffer = 0x803881d8;
someROMLoadedFile_bytesToRead = 0x800d5e50;
end_ROM_ptr__Start_of_padding = 0x80095828;
someROMLoadedFile_bytesLeftToRead = 0x800d5e48;
someROMLoadedFile_lastIndex = 0x800d5e4c;
someROMLoadedFile_address = 0x800d5e44;
someROMLoadedFile_currentReadingAddress = 0x800d5e40;
setMapMusic = 0x80018fa0;
gISVDbgPrnAdrs = 0xb1ff0000;
gKMCDbgPrnAdrs = 0xbff00000;
ptr_GameStateMgr = 0x800a7820;
osRomType = 0x80000304;
osCicId = 0x80000310;
osVersion = 0x80000314;
osMemSize = 0x80000318;
SaveStruct_backup = 0x800d76a0;
convertUTF16ToCustomTextFormat = 0x8001b3c0;
HUD_update = 0x80137eb4;
fade_color = 0x80387ad8;
max_fade_time = 0x80387ade;
textbox_printNumber = 0x8012ce3c;
controller_disconnectController = 0x80016cb0;
fade_alpha = 0x80387adb;
gameplayMgr_main_disableCamerasInMenu = 0x80018688;
gDisplayListHead = 0x800B49E0;
contPak_notInserted_1 = 0x800d7491;
contPak_notInserted_2 = 0x800d7492;
contPak_notInserted_3 = 0x800d7493;
tmp_task = 0x801226d0;
cameraMgr_init = 0x8006686c;
distortion_dlist = 0x80180eb0;
__osException = 0x80080380;
__osExceptionPreamble = 0x80080370;
ROM_compressed_files_table = 0x8009503c;
compressed_file__ID_from_ROMFileTable = 0x800a78c8;
isPlayerDamagedOrDead = 0x8003c99c;
rotateTowardsTargetAngle = 0x8003d060;
seed_RNG_C_rand_srand = 0x80186e3c;
srand = 0x801588e0;
seed_RNG = 0x800973c0;
enemy_item_drops_list = 0x800973a0;
dl_dither_set_settings = 0x80181950;
isBetweenMidnightAnd2AM = 0x8015fa6c;
door_properties = 0x80187610;
loadingZone_exitMap = 0x80156a00;
loadingZone_checkExceptions = 0x801563a8;
loadingZone_checkFillPlayerHealth = 0x80156794;
loadingZone_freezeEntitiesAndSetCameraParams = 0x8015670c;
loadingZone_fillPlayerHealth = 0x801569a0;
loadingZone_createEasyModeEnding_setParams = 0x80156d38;
song_ID_to_play_next = 0x80093d94;
map_song_ID_table = 0x80096600;
map_song_ID_unused = 0x800d5f20;
mapSetup_functions = 0x800966a4;
map_breakables_drop_values_list = 0x80189dd0;
map_door_bitflags_list = 0x80188210;
controllers = 0x80387d7c;
_KMC_REG_WPORT = 0xbff08000;
_KMC_REG_STAT = 0xbff08004;
map__address_of_actor_list_in_map_file = 0x8018a788;
map__starting_non_proximity_spawnable_actors = 0x8018a800;
map_actor_model_model_info = 0x8018a710;
DAT_8018d484 = 0x8018d484;
map_text_segment_address = 0x8016d008;
squashPoint_entrypoint = 0x80156f60;
ptr_master_light = 0x800a78d0;
DAT_800a78f0 = 0x800a78f0;
Another_Display_List = 0x800932e0;
character_hanging_distance_from_edge = 0x800972a0;
current_song_ID = 0x80093d90;
test_grid_map_display_lists = 0x80184d54;
ptr_Player_model_info = 0x8018cda4;
map_model_settings_list = 0x80184e44;
dont_update_map_lighting = 0x80185F7C;
map_player_initial_position = 0x8018cdb0;
moonVisibilityVars = 0x8018CDD0;
map_codenames = 0x801853d4;
map_settings_list = 0x8018504c;
map_color_settings = 0x8018cdf8;
map_fog_color = 0x80387ac8;
map_diffuse_color = 0x80389ecc;
ptr_DMAMgr = 0x800a78c0;
fileSelectController_setupManagerAndLoadAssets = 0x801424c0;
isSoftReset = 0x800947f8;
setup_rsp_dl = 0x80094800;
softReset_timer = 0x800947fc;
game_time = 0x800a7900;
audioFrameMsgQ = 0x800dd520;
audFrameCt = 0x8009f700;
audioInfo = 0x800dd360;
audioReplyMsgQ = 0x800dd638;
__am = 0x800dd358;
nextDMA = 0x8009f704;
audDMAMessageQ = 0x800e21a8;
audDMAMessageBuf = 0x800e21c0;
frameSize = 0x800e1b9c;
minFrameSize = 0x800e1b98;
curAcmdList = 0x8009f708;
ptr_scheduler_audioRequestMQ = 0x800dd350;
aspMainDataStart = 0x800a7560; // name_end:aspMainDataEnd
scheduler = 0x800ac108;
dmaState = 0x800e17a0;
dmaBuffs = 0x800e17b0;
maxFrameSize = 0x800e1ba0;
maxRSPCmds = 0x800e1ba4;
audDMAIOMesgBuf = 0x800e1ba8;
firstTime = 0x8009f70c;
fxref = 0x801226a0;
controllerMsgBuf = 0x800d5e08;
controller_player = 0x800d79b0;
game_time_prev = 0x800a7904;
another_display_list = 0x80363ac0;
sys = 0x80363ab8;
DMAMgr_functions = 0x80093CF0; // size:0x24
DAT_80342148 = 0x80342148;
initial_magic_ball_size = 0x800a4aa0;
PlayerData = 0x80350798;
animationMgr_setSwitchTime = 0x8000b930;
CarrieAttackMgr_subweapon_selectSubweapon = 0x803dab3c;
atariBaseWork_create = 0x800405c4;
Carrie = 0x803427a0;
player_model_info = 0x80350990;
Carrie_damage_grab_update = 0x80028c40;
floatToShort = 0x80044c68;
a_display_list_4 = 0x80180fa0;
enable_backface_culling_display_list = 0x803ddb18;
DAT_80342c28 = 0x80342c28;
playerCameraController_loop = 0x8006bb48;
gameState_settings = 0x80091F50;
footsteps_sfx = 0x80096c60;
map_footstep_SFX_sound_ID_array = 0x80096d20;
slide_speed_when_turning_around = 0x803ddd50;
Carrie_moving_functions = 0x803ddbe4;
Menu_entrypoint = 0x80140fa0;
lens_entrypoint = 0x80132530;
gameplayMenuMgr_functions = 0x80180460; // size:0x1C
selection_buttons_pressed = 0x8018047c; // type:u32
previous_selection_button = 0x80180480; // type:u32
selection_idle_time = 0x80180484;       // type:u32
alternate_costume = 0x80389cee;
player_object_IDs = 0x8009669c;
current_joystick_held_value = 0x800d79e0;
minimum_walking_range = 0x803ddc80;
modelInfo_setPos = 0x80127f28;
reindhart_animations_rotation_data = 0x8016c63c;
carrie_animations_rotation_data = 0x8016c6cc;
minimum_joystick_range_for_changing_from_breaking_to_walking = 0x803ddd60;
crouch_walk_x_speed_multiplier = 0x803dddc0;
crouch_walk_z_speed_multiplier = 0x803dddc8;
player_angle = 0x800d79ce;
joystick_angle = 0x800d79cc;
joystick_X = 0x800d79d0;
joystick_Y = 0x800d79d4;
player_grabbed_by_vampire_timer = 0x80389e76;
angle_of_player_being_grabbed_by_vampire = 0x80389e74;
currentPlayingSequence_uncompressed = 0x803a4770;
sequences_ROM_start_address = 0x8009f764;
sequences_ROM_end_address = 0x8009f90c;
ptr_scheduler_graphicsRequestMQ = 0x800ac9d0;
DAT_8018cda0 = 0x8018cda0;
map_loading_zone_settings_array = 0x80186d18;
_3d_view_camera = 0x8034ed58;
item_pickables_text = 0x8016ca80;
you_cannot_carry_more_items_text = 0x80180c20;
Renon_shop_text_Renon_dialog = 0x80180530;
Renon_shop_text_item_descriptions = 0x8018084c;
file_select_stage_names = 0x801810b0;
file_select_character_names = 0x80181364;
file_selection_map_info_array = 0x801817d0;
file_selection_save_slots = 0x800d78a4;
EASY_text = 0x8018131c;
NORMAL_text = 0x8018132c;
HARD_text = 0x8018133c;
PlayerController_functions = 0x80096694;
a_file_ID = 0x80181978;
another_file_ID = 0x80389ed4;
file_load_array = 0x803881b8;
file_load_array_ID = 0x80387db4;
fileLoad_debugFont = 0x800963c8;
fileLoad_gameplayHUD = 0x800963d8;
debugFont_file = 0x80270800;
gameplayHUD_file = 0x803e5f00;
map_file_info_list = 0x80181970;
loadingFilesFromFileLoadArray = 0x800b49e8;
trans_Carrie_crouch = 0x803d0da0;
rot_Carrie_crouch = 0x803cdd00;
rot_Reindhart_idle = 0x803b7b50;
trans_Reindhart_idle = 0x803c3610;
reindhart_animations_translation_data = 0x8016c764;
carrie_animations_translation_data = 0x8016c7f4;
ptr_player_animations_translation_data = 0x8016c884;
ptr_player_animations_rotation_data = 0x8016c75c;
cutscene_settings = 0x8016B5C0;
kingSkeleton_objectFiles = 0x80095b78;
gameState_konamiLogo_overlay_info = 0x800958b0;

D_8009342C_9402C = 0x8009342C; // ignore:true
objects_file_info         = 0x80093430; // rom:0x00094030 size:0x8A8
gameState_konamiLogo_object_files = 0x800958c0;
gameState_gameOver_object_files = 0x80096348;
random_initSeed = 0x80037970;
player_death_animations = 0x80097060;
carrie_assets_alt_costume_hierarchy = 0x803dd7b0;
carrie_hierarchy = 0x803dd6a4;
UI_Data_Screen_Stage_Select_assets_file = 0x801cc018;
pause_data_options_screen_text = 0x8016ceb8;
PI = 0x8018c5f8;
dl_scissoring_settings_cutscene_display_FULLSCREEN = 0x8016c8b8;
dl_scissoring_settings_cutscene_display_BORDERS = 0x8016c890;
controller_player_previous_frame = 0x800d79be;
PAUSE_MENU_IS_CLOSED = 0x80389cc4;
PLAYER_IS_READING_TEXT = 0x80389cce;
save_file_number = 0x80389cdb;
contPak_file_no = 0x80389cda;
fileSelect_maxDifficultyOption = 0x80181470;
DAT_800dd0e8 = 0x800dd0e8;
actorCreator_functions = 0x8018a6fc;
previous_song_ID = 0x80093d92;
ptr_currentAudioTrackState = 0x8012262c;
yet_another_display_list = 0x80180f80;
pickable_items_assets_file_ID = 0x80389ed8;
player_has_max_health = 0x80180490;
isPlayerAirborne = 0x8003c9e8;
forest_of_silence_actor_list = 0x802bcb90;
ptr_mapObjectParent = 0x800d5f04;
ptr_PlayerController = 0x800d5f08;
ptr_mapSetup = 0x800d5f0c;
ptr_enemyParent = 0x800d5f10;
ptr_enemyTargetGfx = 0x800d5f18;
ptr_gameplayMenuMgr = 0x800d5f1c;
ptr_Object_006C = 0x80389e84;
entrance_cutscene_ID = 0x80389efc;
actorPurpleFireCandle_80188da0 = 0x80188da0;
actor_spawn_radius = 0x8018a6f0;
carrie_magic_ball_damage = 0x803dde7c;
carrie_magic_ball_rings_size = 0x803dde70;
latest_allocated_fig = 0x800a7850;
ptr_Object_0003 = 0x800a78a0;
ptr_PlayerObject = 0x80389cdc;
save_difficulty = 0x80389cc8;
readFileSelection_error = 0x80181494;
ptr_Object_0002 = 0x800a7840;
fileLoad_map = 0x8018ca98;
ptr_Object_006A = 0x80389e80;
current_player_position = 0x8009e1b0;
NisitenmaIchigo_getFileOffset = 0x8003b67c;
player_angle_X = 0x800d79d8;
player_angle_Z = 0x800d79dc;
Nisitenma_Ichigo_files_segment_addresses = 0x80094830;
loadingZone_main_functions = 0x80186dd8;
loadingZone_createEasyModeEnding_functions = 0x80186e00;
cutscene_additional_settings_list = 0x8016b824;
currently_mapped_overlay_evenpaddr = 0x800a78a8;
currently_mapped_overlay_size = 0x800a78b8;
currently_mapped_overlay_vaddr = 0x800a78b0;
mapped_files_array_index = 0x800a78a4;
cutsceneTrigger_functions = 0x8016b5a0;
pickableItemFlash_functions = 0x8009ace0;
max_angle_of_floor_under_player_that_starts_sliding = 0x800a3238;
playerCollisionInfoFloor = 0x800d7b58;
map_file_buffers = 0x8018ca88;
room_of_clocks_candle_map_breakables_drop_values_list = 0x80189e48;
actorRoomOfClocksCandle_init_functions = 0x80188db8;
actorRoomOfClocksCandle_functions = 0x80188dc0;
CAMERA_ZOOMED_IN_WHEN_READING_TEXT = 0x80389cd2;
animationMgr_checkEqualCurAnimTranslationData = 0x8000bb3c;
animationMgr_checkEqualCurAnimRotationData = 0x8000bb64;
animationMgr_checkDifferentCurAnimTranslationDataPtrs = 0x8000bbb4;
D_80383AB8 = 0x80383AB8;
map_bounding_box_size = 0x80181918;
currently_loaded_map_pieces = 0x8018cab0;
mapMgr_functions = 0x80181938;
magicBall_functions = 0x8009ad00;
loadingZone_fillHealth_functions = 0x80186df8;
FILE_DIFFICULTY = 0x80181468;
fileSelect_currentDifficultyOption = 0x8018146c;
Carrie_size_of_dynamic_skirt = 0x803ddc50;
first_person_view_camera_speed = 0x800a605c;
FIRST_PERSON_VIEW_BUTTON_IS_PRESSED = 0x8009b4b4;
PLAYER_IS_STILL = 0x8009b4bc;
PLAYER_IS_IN_FIRST_PERSON_VIEW = 0x8009b4b8;
PLAYER_IS_LOCKING_VIEW_WITH_R = 0x8009b4cc;
TIME_PLAYER_IS_HOLDING_FIRST_PERSON_BUTTON = 0x8009b4b0;
TIME_IN_FIRST_PERSON_VIEW = 0x8009b4d0;
FIRST_PERSON_VIEW_CONTROLLER_STICK = 0x8009b4d4;
FIRST_PERSON_VIEW_WHILE_ENTERING_A_DOOR = 0x8009b4c0;
cameraMgr_functions = 0x8009b454;
playerCameraController_functions = 0x8009e1c8;
enemyTargetGfx_functions = 0x80096eb8;
enemyTargetGfx = 0x80342644;
enemyTargetGfx_hierarchy = 0x80096d60;
candle_droppedItem_dropAccel = 0x8018c878;
candle_droppedItem_maxDropSpeed = 0x8018c870;
candle_falling_gravity_increase = 0x8018c800;
decorativeElements_functions = 0x80186e20;
breakable_rock_info_array = 0x80189348;
breakableRock_breaking_gravity = 0x8018c830;
villa_chandelier_breaking_gravity = 0x8018c810;
D_80092B2C = 0x80092B2C;
atan2Tbl = 0x80092b50;
running_turning_angle_speed = 0x803ddd58;
Player_idle_functions = 0x803ddb74;
picked_powerup_amount = 0x800d7c80;
fileSelect_functions = 0x80181498;
knife_functions = 0x800972f0;
camera_params_array = 0x800931bc;
common_camera_8009B430 = 0x8009B430;
common_camera_8009B434 = 0x8009B434;
common_camera_game_view = 0x8009B438;
common_camera_effects = 0x8009B43C;
common_camera_8009B440 = 0x8009B440;
common_camera_8009B444 = 0x8009B444;
common_camera_8009B448 = 0x8009B448;
common_camera_8009B44C = 0x8009B44C;
common_camera_HUD = 0x8009B450;
player_max_running_XZ_speed = 0x803ddc34;
jump_gravity_accel = 0x803ddc4c;
max_jogging_XZ_speed = 0x803ddc44;
_3d_view_camera_pos = 0x80093d78;
miniElevator_loop_functions = 0x80188c34;
miniElevator_state_functions = 0x80188c3c;
elevator_time_until_moving_again = 0x8018c7c0;
actorMiniElevator_getMovingFlag = 0x80162780;
atari_work_table = 0x800d8248;
Carrie_crouching_throws_magic_ball_using_short_anim = 0x803dd6a0;
effect_obj_info_array = 0x8009ad70;
joystick_held_9_percent = 0x800a3628;
max_jump_height = 0x803ddc48;
map_silence_ambience_sounds_functions_array = 0x80186710;
number_of_map_actor_models_in_map = 0x8018eb02;
currently_stepping_map_piece_index = 0x8018cdac;
alSeqFileNew = 0x80081a08;
banks_ROM_segment_start = 0x8009f710;
banks_ROM_segment_end = 0x8009f71c;
wavetable_tbl_ROM_ptrs = 0x8009f728;
control_ctl_ptrs = 0x800e22e8;
gFramebuffers = 0x80200000;
rspF3DEX2Start = 0x8008fda0;
gGraphicTasks = 0x800ac000;
gfx_queue = 0x800abfc0;
gGraphicTasks_MesgQ = 0x800abff8;
rspF3DEX2DataStart = 0x800a7140; // name_end:rspF3DEX2DataEnd
gGfxSPTaskStack = 0x800d59f0;
gGfxSPTaskOutputBuffer = 0x800b59f0;
gGfxSPTaskYieldBuffer = 0x800b49f0;
gfx_messages = 0x800abfd8;
HUD_functions = 0x80180514;
ALVoice_index = 0x801222fc;
Actor_getVariable1 = 0x8003b824;
renonShop_functions = 0x80180bf4;
Renon_shop_item_descriptions = 0x80180898;
Renon_shop_data = 0x80180b78;
player_attack_and_getting_hit_counter = 0x801226b0;
player_damage_animations = 0x80096ed0;
nitroExplosion_functions = 0x8009733c;
player_params = 0x80342bb4;
knife_hit_effect_scale = 0x800a3678;
Carrie_frozenGrab_functions = 0x800971b0;
gameplayMgr_functions = 0x8009663c;
gameplayMgr_main_functions = 0x80096650;
gameplayMgr_menu_functions = 0x80096680;
initialize_hud_params_delay_timer = 0x8018ca50; // type:u32
heaps = 0x80271000;
Carrie_magic_ball_initial_pos = 0x803ddf08;
CarrieAttackMgr_functions = 0x803ddef8;
CarrieAttackMgr_melee_functions = 0x803ddf30;
CarrieAttackMgr_subweapon_functions = 0x803ddf58;
character_jump_momentum_multipliers = 0x80097260;
lever_init_functions = 0x801884f8;
lever_main_functions = 0x80188500;
Carrie_frozen_functions = 0x803ddc20;
gZBuffer = 0x801a6800;
map_file_buffer_size = 0x8018cda8;
map_file_buffer_ptr = 0x8018ca80;
skybox_moon_phases_texture = 0x80187374;
dl_enableFrontFaceCulling = 0x801818e0;
actorMirrorCopy_functions = 0x801818f8;
Actor_getInitialPosition = 0x8003bf44;
vec3f_magnitudeSquared = 0x8003d538;
modelInfo_setPosVec3f = 0x8003cf74;
textboxObject_functions = 0x8016d07c;
play_health_recovery_sound = 0x80180494;
map_objects_overlay_file_info = 0x80095fd0;
camera_params_array_indexes = 0x80185358;
shadow_functions = 0x8009ac30;
Carrie_init_functions = 0x803ddb6c;
Carrie_state_functions = 0x803ddb30;
ptr_Carrie_state_functions = 0x800d7afc;
Carrie_damage_functions = 0x800970e0;
Carrie_action_functions = 0x803ddbb4;
Player_ledgeMovement_functions = 0x800972a8;
Carrie_slide_functions = 0x803ddc0c;
Carrie_dead_functions = 0x8009717c;
Carrie_attack_functions = 0x803ddba4;
Carrie_jump_functions = 0x80097210;
Carrie_falling_functions = 0x803ddb90;
Carrie_enemyLock_functions = 0x803ddc18;
ledge_moving_max_speed = 0x800a3640;
cameraMgr = 0x80342230;
enemyGenerator_functions = 0x8018a964;
enemyGenerator_entries_table = 0x8018aa70;
current_cutscene_ID__Carrie_overlay = 0x803ddb68;
prt_80040c08_6bd09446 = 0x80040c08;
atari_center_point_translation_matrix = 0x800d8190;
atari_size_translation_matrix = 0x800d8150;
__osCleanupThread = 0x80080c60;
target_atari_data_work_pos = 0x800d821c;
attacker_atari_data_work_pos = 0x800d8228;
distance_attacker_target_atari_data_vector = 0x800d8234;
distance_attacker_target_atari_data = 0x800d8244;
atari_work_update_position_data_functions = 0x80098600;
__osThreadSave = 0x80122800;
collision_triangle_array_type_ID = 0x8018eb00;
fileSelectController_functions = 0x80181070;
mark_functions = 0x801817b0;
scroll_functions = 0x80181560;
D_80092F50 = 0x80092F50;
text_color_anim_data_table = 0x8016d0a0;
subweapon_jewel_count = 0x80096c44;
gAudioCurrSoundsStack = 0x80122380;
gAudioCurrSoundsStackIndex = 0x8012237a;
gPlaySFX = 0x801222f9;
currentAudioTrackState = 0x803a34e0;
currentAudioTrackVoice = 0x801223f8;
loading_zone_cutscene_settings_table = 0x80186d90;
cross_functions = 0x80097318;
cross_destroyed_effect_scale = 0x800a3700;
map_file_buffer_extra_size = 0x801852e0;
playerCollisionInfoWall = 0x800d7ba0;
playerCollisionInfoCeiling = 0x800d7bd0;
pickable_items_color_settings = 0x80186020;
lens_functions = 0x80180444;
Menu_functions = 0x80181058;
player_heavy_wall_hit_damaged_timer = 0x80096c40;
effectMgr_numberOfEffectsReachedLimit = 0x8005cf70;
playerCameraController = 0x8034272c;
roomMgr_main_functions = 0x80187540;
door_sounds_array = 0x80188288;
riverWater_finctions = 0x80188874;
max_walking_XZ_speed = 0x803ddc40;
ledge_moving_speed_multiplier = 0x803ddc3c;
player_crouching_height = 0x803ddc38;
glance_functions = 0x801817c0;
cameraModeText_textDlists = 0x8009e190;
distortion_functions = 0x80180f00;
file_selection_textboxes = 0x8018138c;
file_selection_number_strings = 0x8018129c;
file_selection_Yes_No_string = 0x8018134c;
file_selection_arrow_string = 0x80181360;
file_selection_money_string = 0x801813d4;
HEAP_MULTIPURPOSE_START = 0x80271060;
HEAP_MENU_DATA_START = 0x801CC000;
map_lights = 0x8018CDE0;
play_sound_in_position_and_set_volume = 0x80013C40;
D_8034D2B8 = 0x8034D2B8;
figures_array = 0x8034EAB8;
func_8000EE18 = 0x8000EE18;
StageProp_Loop = 0x801578FC;
StageProp_Destroy = 0x801579e0;
effect_setMaxFrameSpeed = 0x8005B78C;
light_create = 0x80004C40;
WindowWork_setParams = 0x801365EC;
func_8000C6D0 = 0x8000C6D0;
updateGameSound = 0x80012400;
Figure_Update = 0x8000C740;
Figure_UpdateMatrices = 0x8000c800;
drawFog = 0x80005590;
func_80005658 = 0x80005658;
effect_isMarkForDeletion = 0x8005d244;
effect_markForDeletion = 0x8005d230;
func_800139D4 = 0x800139D4;
D_80093D20_94920 = 0x80093D20; // size:0x1C
// devAddr = 0xA0000000;
figure_setChild = 0x80004ce8;
modelLighting_create = 0x80010b60;
modelLighting_createList = 0x80010d78;
Actor_getPosAndVariable1 = 0x80038730;
light_setAmbientColor = 0x800107d8;
light_setColorAndDirection = 0x800107f0;
light_addColorAndDirection = 0x80010858;
light_addColorAndDirectionOrSetAmbientColorIfListIsEmpty = 0x800109d0;
map_misc_event_flags = 0x8018cdbc;
audioControlFadeOutType_setType = 0x80014d40;
JoystickAndPlayerAngleList_index = 0x800d7a04;
JoystickAndPlayerAngleList = 0x800d7a08;
func_800217AC_223AC = 0x800217AC;
JoystickAndPlayerAngleList_pushCurrentDataAtIndex = 0x80021e28;
D_800D7B00_A8DD0 = 0x800D7B00;
Cutscene_UpdateCameraLookAtDir = 0x801286cc;
animationMgr_unsetSmoothEndAnimationFlag = 0x8000C078;
func_801299A4 = 0x801299A4;
func_80128D20 = 0x80128D20;
func_8012A130 = 0x8012A130;
func_8012A2B8 = 0x8012A2B8;
Cutscene_SetCameraPosToEndCoords = 0x80127f48;
Cutscene_SetEndCoordsToActor = 0x80127f88;
obj017C_Entrypoint = 0x80161000;         // type:func segment:common
obj017C_Init = 0x80161070;               // type:func segment:common
obj017C_Loop = 0x80161118;               // type:func segment:common
obj017C_dlists_shokei_tou = 0x801888e0;  // segment:common size:0x04 rom:0x0010BAD0
obj017C_dlists = 0x801888e4;             // segment:common size:0x78 rom:0x0010BAD4
obj017C_functions = 0x8018895c;          // segment:common size:0x08 rom:0x0010BB4C
Fire_Entrypoint = 0x8004CF20;
Fire_Init = 0x8004CF90;
Fire_Loop = 0x8004D208;
Fire_Destroy = 0x8004D294;
Fire_functions = 0x8009AA70;
FireSparkles_Entrypoint = 0x80055890;
FireSparkles_Init = 0x80055900;
FireSparkles_Loop = 0x80055a6c;
FireSparkles_Destroy = 0x80055aa8;
FireSparkles_material_dlist = 0x8009ac80;
FireSparkles_functions = 0x8009ac98;
isSoundVolumeDecreased = 0x80013574;
decreaseSoundVolume = 0x80013518;
prepareSoundForPlay_defaultSettings = 0x80079d7c;

// src/common/necronomicon.c =============================================================

// .text
necro_entrypoint = 0x8014e830; // type:func  segment:common
necro_isWorkCreated = 0x8014e8a0; // type:func  segment:common
necro_init = 0x8014e8d8; // type:func  segment:common
necro_loop = 0x8014eb38; // type:func  segment:common
necro_close = 0x8014ee0c; // type:func  segment:common
necro_finishedClosing = 0x8014f19c; // type:func  segment:common
necro_destroy = 0x8014f3d0; // type:func  segment:common
// .data
necro_functions = 0x801815a0;          // segment:common size:0x18
// .rodata
D_8018bdd0 = 0x8018bdd0;          // type:f64 segment:common
D_8018bdd8 = 0x8018bdd8;          // type:f64 segment:common

// End of src/common/necronomicon.c ======================================================

necroWork_create = 0x8014f400;    // type:func  segment:common
D_8018bde0 = 0x8018bde0;          // type:asciz segment:common
